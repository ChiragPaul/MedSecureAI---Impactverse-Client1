{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,QAAQ;;KAElC;IACL,IAAIF,QAAQC,GAAG,CAACK,yBAAyB,EAAE;;SAcpC;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;QAGT,OAAO;;IAOT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n"],"names":["module","exports","require","vendored","ReactJsxRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,sKACRC,QAAQ,CAAC,YAAY,CAAEC,eAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n"],"names":["module","exports","require","vendored","React"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,sKACRC,QAAQ,CAAC,YAAY,CAAEC,KAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-dom.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactDOM\n"],"names":["module","exports","require","vendored","ReactDOM"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,sKACRC,QAAQ,CAAC,YAAY,CAAEC,QAAQ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/app-router-context.js"],"sourcesContent":["\"use strict\";\nmodule.exports = require('../../module.compiled').vendored['contexts'].AppRouterContext;\n\n//# sourceMappingURL=app-router-context.js.map"],"names":[],"mappings":"AACA,OAAO,OAAO,GAAG;;;;KAAiC,QAAQ,CAAC,WAAW,CAAC,gBAAgB,EAEvF,8CAA8C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-server-dom-turbopack-client.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactServerDOMTurbopackClient\n"],"names":["module","exports","require","vendored","ReactServerDOMTurbopackClient"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,sKACRC,QAAQ,CAAC,YAAY,CAAEC,6BAA6B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/app-router-headers.js"],"sourcesContent":["export const RSC_HEADER = 'rsc';\nexport const ACTION_HEADER = 'next-action';\n// TODO: Instead of sending the full router state, we only need to send the\n// segment path. Saves bytes. Then we could also use this field for segment\n// prefetches, which also need to specify a particular segment.\nexport const NEXT_ROUTER_STATE_TREE_HEADER = 'next-router-state-tree';\nexport const NEXT_ROUTER_PREFETCH_HEADER = 'next-router-prefetch';\n// This contains the path to the segment being prefetched.\n// TODO: If we change next-router-state-tree to be a segment path, we can use\n// that instead. Then next-router-prefetch and next-router-segment-prefetch can\n// be merged into a single enum.\nexport const NEXT_ROUTER_SEGMENT_PREFETCH_HEADER = 'next-router-segment-prefetch';\nexport const NEXT_HMR_REFRESH_HEADER = 'next-hmr-refresh';\nexport const NEXT_HMR_REFRESH_HASH_COOKIE = '__next_hmr_refresh_hash__';\nexport const NEXT_URL = 'next-url';\nexport const RSC_CONTENT_TYPE_HEADER = 'text/x-component';\nexport const FLIGHT_HEADERS = [\n    RSC_HEADER,\n    NEXT_ROUTER_STATE_TREE_HEADER,\n    NEXT_ROUTER_PREFETCH_HEADER,\n    NEXT_HMR_REFRESH_HEADER,\n    NEXT_ROUTER_SEGMENT_PREFETCH_HEADER\n];\nexport const NEXT_RSC_UNION_QUERY = '_rsc';\nexport const NEXT_ROUTER_STALE_TIME_HEADER = 'x-nextjs-stale-time';\nexport const NEXT_DID_POSTPONE_HEADER = 'x-nextjs-postponed';\nexport const NEXT_REWRITTEN_PATH_HEADER = 'x-nextjs-rewritten-path';\nexport const NEXT_REWRITTEN_QUERY_HEADER = 'x-nextjs-rewritten-query';\nexport const NEXT_IS_PRERENDER_HEADER = 'x-nextjs-prerender';\nexport const NEXT_ACTION_NOT_FOUND_HEADER = 'x-nextjs-action-not-found';\n\n//# sourceMappingURL=app-router-headers.js.map"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,aAAa;AACnB,MAAM,gBAAgB;AAItB,MAAM,gCAAgC;AACtC,MAAM,8BAA8B;AAKpC,MAAM,sCAAsC;AAC5C,MAAM,0BAA0B;AAChC,MAAM,+BAA+B;AACrC,MAAM,WAAW;AACjB,MAAM,0BAA0B;AAChC,MAAM,iBAAiB;IAC1B;IACA;IACA;IACA;IACA;CACH;AACM,MAAM,uBAAuB;AAC7B,MAAM,gCAAgC;AACtC,MAAM,2BAA2B;AACjC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,2BAA2B;AACjC,MAAM,+BAA+B,6BAE5C,8CAA8C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/app-call-server.js"],"sourcesContent":["import { startTransition } from 'react';\nimport { ACTION_SERVER_ACTION } from './components/router-reducer/router-reducer-types';\nimport { dispatchAppRouterAction } from './components/use-action-queue';\nexport async function callServer(actionId, actionArgs) {\n    return new Promise((resolve, reject)=>{\n        startTransition(()=>{\n            dispatchAppRouterAction({\n                type: ACTION_SERVER_ACTION,\n                actionId,\n                actionArgs,\n                resolve,\n                reject\n            });\n        });\n    });\n}\n\n//# sourceMappingURL=app-call-server.js.map"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;AAGO,eAAe,WAAW,QAAQ,EAAE,UAAU;IACjD,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,IAAA,gRAAe,EAAC;YACZ,wBAAwB;gBACpB,MAAM;gBACN;gBACA;gBACA;gBACA;YACJ;QACJ;IACJ;AACJ,EAEA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/app-find-source-map-url.js"],"sourcesContent":["const basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nconst pathname = \"\" + basePath + \"/__nextjs_source-map\";\nexport const findSourceMapURL = process.env.NODE_ENV === 'development' ? function findSourceMapURL(filename) {\n    if (filename === '') {\n        return null;\n    }\n    if (filename.startsWith(document.location.origin) && filename.includes('/_next/static')) {\n        // This is a request for a client chunk. This can only happen when\n        // using Turbopack. In this case, since we control how those source\n        // maps are generated, we can safely assume that the sourceMappingURL\n        // is relative to the filename, with an added `.map` extension. The\n        // browser can just request this file, and it gets served through the\n        // normal dev server, without the need to route this through\n        // the `/__nextjs_source-map` dev middleware.\n        return \"\" + filename + \".map\";\n    }\n    const url = new URL(pathname, document.location.origin);\n    url.searchParams.set('filename', filename);\n    return url.href;\n} : undefined;\n\n//# sourceMappingURL=app-find-source-map-url.js.map"],"names":[],"mappings":";;;;AAAA,MAAM,WAAW,wCAAsC;AACvD,MAAM,WAAW,KAAK,WAAW;AAC1B,MAAM,mBAAmB,uCAAyC,SAAS,iBAAiB,QAAQ;IACvG,IAAI,aAAa,IAAI;QACjB,OAAO;IACX;IACA,IAAI,SAAS,UAAU,CAAC,SAAS,QAAQ,CAAC,MAAM,KAAK,SAAS,QAAQ,CAAC,kBAAkB;QACrF,kEAAkE;QAClE,mEAAmE;QACnE,qEAAqE;QACrE,mEAAmE;QACnE,qEAAqE;QACrE,4DAA4D;QAC5D,6CAA6C;QAC7C,OAAO,KAAK,WAAW;IAC3B;IACA,MAAM,MAAM,IAAI,IAAI,UAAU,SAAS,QAAQ,CAAC,MAAM;IACtD,IAAI,YAAY,CAAC,GAAG,CAAC,YAAY;IACjC,OAAO,IAAI,IAAI;AACnB,IAAI,yBAEJ,mDAAmD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/flight-data-helpers.js"],"sourcesContent":["import { PAGE_SEGMENT_KEY } from '../shared/lib/segment';\n// TODO: We should only have to export `normalizeFlightData`, however because the initial flight data\n// that gets passed to `createInitialRouterState` doesn't conform to the `FlightDataPath` type (it's missing the root segment)\n// we're currently exporting it so we can use it directly. This should be fixed as part of the unification of\n// the different ways we express `FlightSegmentPath`.\nexport function getFlightDataPartsFromPath(flightDataPath) {\n    // Pick the last 4 items from the `FlightDataPath` to get the [tree, seedData, viewport, isHeadPartial].\n    const flightDataPathLength = 4;\n    // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.\n    const [tree, seedData, head, isHeadPartial] = flightDataPath.slice(-flightDataPathLength);\n    // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.\n    const segmentPath = flightDataPath.slice(0, -flightDataPathLength);\n    var _segmentPath_;\n    return {\n        // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment (\"\")\n        // to the start of the segment path in some places which makes it hard to use solely the segment path.\n        // Look for \"// TODO-APP: remove ''\" in the codebase.\n        pathToSegment: segmentPath.slice(0, -1),\n        segmentPath,\n        // if the `FlightDataPath` corresponds with the root, there'll be no segment path,\n        // in which case we default to ''.\n        segment: (_segmentPath_ = segmentPath[segmentPath.length - 1]) != null ? _segmentPath_ : '',\n        tree,\n        seedData,\n        head,\n        isHeadPartial,\n        isRootRender: flightDataPath.length === flightDataPathLength\n    };\n}\nexport function getNextFlightSegmentPath(flightSegmentPath) {\n    // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items\n    // to get the next segment path.\n    return flightSegmentPath.slice(2);\n}\nexport function normalizeFlightData(flightData) {\n    // FlightData can be a string when the server didn't respond with a proper flight response,\n    // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.\n    if (typeof flightData === 'string') {\n        return flightData;\n    }\n    return flightData.map((flightDataPath)=>getFlightDataPartsFromPath(flightDataPath));\n}\n/**\n * This function is used to prepare the flight router state for the request.\n * It removes markers that are not needed by the server, and are purely used\n * for stashing state on the client.\n * @param flightRouterState - The flight router state to prepare.\n * @param isHmrRefresh - Whether this is an HMR refresh request.\n * @returns The prepared flight router state.\n */ export function prepareFlightRouterStateForRequest(flightRouterState, isHmrRefresh) {\n    // HMR requests need the complete, unmodified state for proper functionality\n    if (isHmrRefresh) {\n        return encodeURIComponent(JSON.stringify(flightRouterState));\n    }\n    return encodeURIComponent(JSON.stringify(stripClientOnlyDataFromFlightRouterState(flightRouterState)));\n}\n/**\n * Recursively strips client-only data from FlightRouterState while preserving\n * server-needed information for proper rendering decisions.\n */ function stripClientOnlyDataFromFlightRouterState(flightRouterState) {\n    const [segment, parallelRoutes, _url, refreshMarker, isRootLayout, hasLoadingBoundary] = flightRouterState;\n    // __PAGE__ segments are always fetched from the server, so there's\n    // no need to send them up\n    const cleanedSegment = stripSearchParamsFromPageSegment(segment);\n    // Recursively process parallel routes\n    const cleanedParallelRoutes = {};\n    for (const [key, childState] of Object.entries(parallelRoutes)){\n        cleanedParallelRoutes[key] = stripClientOnlyDataFromFlightRouterState(childState);\n    }\n    const result = [\n        cleanedSegment,\n        cleanedParallelRoutes,\n        null,\n        shouldPreserveRefreshMarker(refreshMarker) ? refreshMarker : null\n    ];\n    // Append optional fields if present\n    if (isRootLayout !== undefined) {\n        result[4] = isRootLayout;\n    }\n    if (hasLoadingBoundary !== undefined) {\n        result[5] = hasLoadingBoundary;\n    }\n    return result;\n}\n/**\n * Strips search parameters from __PAGE__ segments to prevent sensitive\n * client-side data from being sent to the server.\n */ function stripSearchParamsFromPageSegment(segment) {\n    if (typeof segment === 'string' && segment.startsWith(PAGE_SEGMENT_KEY + '?')) {\n        return PAGE_SEGMENT_KEY;\n    }\n    return segment;\n}\n/**\n * Determines whether the refresh marker should be sent to the server\n * Client-only markers like 'refresh' are stripped, while server-needed markers\n * like 'refetch' and 'inside-shared-layout' are preserved.\n */ function shouldPreserveRefreshMarker(refreshMarker) {\n    return Boolean(refreshMarker && refreshMarker !== 'refresh');\n}\n\n//# sourceMappingURL=flight-data-helpers.js.map"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAKO,SAAS,2BAA2B,cAAc;IACrD,wGAAwG;IACxG,MAAM,uBAAuB;IAC7B,sFAAsF;IACtF,MAAM,CAAC,MAAM,UAAU,MAAM,cAAc,GAAG,eAAe,KAAK,CAAC,CAAC;IACpE,6GAA6G;IAC7G,MAAM,cAAc,eAAe,KAAK,CAAC,GAAG,CAAC;IAC7C,IAAI;IACJ,OAAO;QACH,kGAAkG;QAClG,sGAAsG;QACtG,qDAAqD;QACrD,eAAe,YAAY,KAAK,CAAC,GAAG,CAAC;QACrC;QACA,kFAAkF;QAClF,kCAAkC;QAClC,SAAS,CAAC,gBAAgB,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE,KAAK,OAAO,gBAAgB;QACzF;QACA;QACA;QACA;QACA,cAAc,eAAe,MAAM,KAAK;IAC5C;AACJ;AACO,SAAS,yBAAyB,iBAAiB;IACtD,4GAA4G;IAC5G,gCAAgC;IAChC,OAAO,kBAAkB,KAAK,CAAC;AACnC;AACO,SAAS,oBAAoB,UAAU;IAC1C,2FAA2F;IAC3F,kGAAkG;IAClG,IAAI,OAAO,eAAe,UAAU;QAChC,OAAO;IACX;IACA,OAAO,WAAW,GAAG,CAAC,CAAC,iBAAiB,2BAA2B;AACvE;AAQW,SAAS,mCAAmC,iBAAiB,EAAE,YAAY;IAClF,4EAA4E;IAC5E,IAAI,cAAc;QACd,OAAO,mBAAmB,KAAK,SAAS,CAAC;IAC7C;IACA,OAAO,mBAAmB,KAAK,SAAS,CAAC,yCAAyC;AACtF;AACA;;;CAGC,GAAG,SAAS,yCAAyC,iBAAiB;IACnE,MAAM,CAAC,SAAS,gBAAgB,MAAM,eAAe,cAAc,mBAAmB,GAAG;IACzF,mEAAmE;IACnE,0BAA0B;IAC1B,MAAM,iBAAiB,iCAAiC;IACxD,sCAAsC;IACtC,MAAM,wBAAwB,CAAC;IAC/B,KAAK,MAAM,CAAC,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,gBAAgB;QAC3D,qBAAqB,CAAC,IAAI,GAAG,yCAAyC;IAC1E;IACA,MAAM,SAAS;QACX;QACA;QACA;QACA,4BAA4B,iBAAiB,gBAAgB;KAChE;IACD,oCAAoC;IACpC,IAAI,iBAAiB,WAAW;QAC5B,MAAM,CAAC,EAAE,GAAG;IAChB;IACA,IAAI,uBAAuB,WAAW;QAClC,MAAM,CAAC,EAAE,GAAG;IAChB;IACA,OAAO;AACX;AACA;;;CAGC,GAAG,SAAS,iCAAiC,OAAO;IACjD,IAAI,OAAO,YAAY,YAAY,QAAQ,UAAU,CAAC,mBAAmB,MAAM;QAC3E,OAAO;IACX;IACA,OAAO;AACX;AACA;;;;CAIC,GAAG,SAAS,4BAA4B,aAAa;IAClD,OAAO,QAAQ,iBAAiB,kBAAkB;AACtD,EAEA,+CAA+C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/app-build-id.js"],"sourcesContent":["// This gets assigned as a side-effect during app initialization. Because it\n// represents the build used to create the JS bundle, it should never change\n// after being set, so we store it in a global variable.\n//\n// When performing RSC requests, if the incoming data has a different build ID,\n// we perform an MPA navigation/refresh to load the updated build and ensure\n// that the client and server in sync.\n// Starts as an empty string. In practice, because setAppBuildId is called\n// during initialization before hydration starts, this will always get\n// reassigned to the actual build ID before it's ever needed by a navigation.\n// If for some reasons it didn't, due to a bug or race condition, then on\n// navigation the build comparision would fail and trigger an MPA navigation.\nlet globalBuildId = '';\nexport function setAppBuildId(buildId) {\n    globalBuildId = buildId;\n}\nexport function getAppBuildId() {\n    return globalBuildId;\n}\n\n//# sourceMappingURL=app-build-id.js.map"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,4EAA4E;AAC5E,wDAAwD;AACxD,EAAE;AACF,+EAA+E;AAC/E,4EAA4E;AAC5E,sCAAsC;AACtC,0EAA0E;AAC1E,sEAAsE;AACtE,6EAA6E;AAC7E,yEAAyE;AACzE,6EAA6E;;;;;;;AAC7E,IAAI,gBAAgB;AACb,SAAS,cAAc,OAAO;IACjC,gBAAgB;AACpB;AACO,SAAS;IACZ,OAAO;AACX,EAEA,wCAAwC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/router-reducer/fetch-server-response.js"],"sourcesContent":["'use client';\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { createFromReadableStream as createFromReadableStreamBrowser } from 'react-server-dom-webpack/client';\nimport { NEXT_ROUTER_PREFETCH_HEADER, NEXT_ROUTER_STATE_TREE_HEADER, NEXT_RSC_UNION_QUERY, NEXT_URL, RSC_HEADER, RSC_CONTENT_TYPE_HEADER, NEXT_HMR_REFRESH_HEADER, NEXT_DID_POSTPONE_HEADER, NEXT_ROUTER_STALE_TIME_HEADER } from '../app-router-headers';\nimport { callServer } from '../../app-call-server';\nimport { findSourceMapURL } from '../../app-find-source-map-url';\nimport { PrefetchKind } from './router-reducer-types';\nimport { normalizeFlightData, prepareFlightRouterStateForRequest } from '../../flight-data-helpers';\nimport { getAppBuildId } from '../../app-build-id';\nimport { setCacheBustingSearchParam } from './set-cache-busting-search-param';\nimport { urlToUrlWithoutFlightMarker } from '../../route-params';\nconst createFromReadableStream = createFromReadableStreamBrowser;\nfunction doMpaNavigation(url) {\n    return {\n        flightData: urlToUrlWithoutFlightMarker(new URL(url, location.origin)).toString(),\n        canonicalUrl: undefined,\n        couldBeIntercepted: false,\n        prerendered: false,\n        postponed: false,\n        staleTime: -1\n    };\n}\nlet abortController = new AbortController();\nif (typeof window !== 'undefined') {\n    // Abort any in-flight requests when the page is unloaded, e.g. due to\n    // reloading the page or performing hard navigations. This allows us to ignore\n    // what would otherwise be a thrown TypeError when the browser cancels the\n    // requests.\n    window.addEventListener('pagehide', ()=>{\n        abortController.abort();\n    });\n    // Use a fresh AbortController instance on pageshow, e.g. when navigating back\n    // and the JavaScript execution context is restored by the browser.\n    window.addEventListener('pageshow', ()=>{\n        abortController = new AbortController();\n    });\n}\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */ export async function fetchServerResponse(url, options) {\n    const { flightRouterState, nextUrl, prefetchKind } = options;\n    const headers = {\n        // Enable flight response\n        [RSC_HEADER]: '1',\n        // Provide the current router state\n        [NEXT_ROUTER_STATE_TREE_HEADER]: prepareFlightRouterStateForRequest(flightRouterState, options.isHmrRefresh)\n    };\n    /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */ if (prefetchKind === PrefetchKind.AUTO) {\n        headers[NEXT_ROUTER_PREFETCH_HEADER] = '1';\n    }\n    if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n        headers[NEXT_HMR_REFRESH_HEADER] = '1';\n    }\n    if (nextUrl) {\n        headers[NEXT_URL] = nextUrl;\n    }\n    try {\n        var _res_headers_get;\n        // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n        // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n        // Otherwise, all other prefetches are sent with a \"low\" priority.\n        // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n        const fetchPriority = prefetchKind ? prefetchKind === PrefetchKind.TEMPORARY ? 'high' : 'low' : 'auto';\n        if (process.env.NODE_ENV === 'production') {\n            if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n                // In \"output: export\" mode, we can't rely on headers to distinguish\n                // between HTML and RSC requests. Instead, we append an extra prefix\n                // to the request.\n                url = new URL(url);\n                if (url.pathname.endsWith('/')) {\n                    url.pathname += 'index.txt';\n                } else {\n                    url.pathname += '.txt';\n                }\n            }\n        }\n        const res = await createFetch(url, headers, fetchPriority, abortController.signal);\n        const responseUrl = urlToUrlWithoutFlightMarker(new URL(res.url));\n        const canonicalUrl = res.redirected ? responseUrl : undefined;\n        const contentType = res.headers.get('content-type') || '';\n        const interception = !!((_res_headers_get = res.headers.get('vary')) == null ? void 0 : _res_headers_get.includes(NEXT_URL));\n        const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER);\n        const staleTimeHeaderSeconds = res.headers.get(NEXT_ROUTER_STALE_TIME_HEADER);\n        const staleTime = staleTimeHeaderSeconds !== null ? parseInt(staleTimeHeaderSeconds, 10) * 1000 : -1;\n        let isFlightResponse = contentType.startsWith(RSC_CONTENT_TYPE_HEADER);\n        if (process.env.NODE_ENV === 'production') {\n            if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n                if (!isFlightResponse) {\n                    isFlightResponse = contentType.startsWith('text/plain');\n                }\n            }\n        }\n        // If fetch returns something different than flight response handle it like a mpa navigation\n        // If the fetch was not 200, we also handle it like a mpa navigation\n        if (!isFlightResponse || !res.ok || !res.body) {\n            // in case the original URL came with a hash, preserve it before redirecting to the new URL\n            if (url.hash) {\n                responseUrl.hash = url.hash;\n            }\n            return doMpaNavigation(responseUrl.toString());\n        }\n        // We may navigate to a page that requires a different Webpack runtime.\n        // In prod, every page will have the same Webpack runtime.\n        // In dev, the Webpack runtime is minimal for each page.\n        // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.\n        if (process.env.NODE_ENV !== 'production' && !process.env.TURBOPACK) {\n            await require('../../dev/hot-reloader/app/hot-reloader-app').waitForWebpackRuntimeHotUpdate();\n        }\n        // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n        const flightStream = postponed ? createUnclosingPrefetchStream(res.body) : res.body;\n        const response = await createFromNextReadableStream(flightStream);\n        if (getAppBuildId() !== response.b) {\n            return doMpaNavigation(res.url);\n        }\n        return {\n            flightData: normalizeFlightData(response.f),\n            canonicalUrl: canonicalUrl,\n            couldBeIntercepted: interception,\n            prerendered: response.S,\n            postponed,\n            staleTime\n        };\n    } catch (err) {\n        if (!abortController.signal.aborted) {\n            console.error(\"Failed to fetch RSC payload for \" + url + \". Falling back to browser navigation.\", err);\n        }\n        // If fetch fails handle it like a mpa navigation\n        // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n        // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n        return {\n            flightData: url.toString(),\n            canonicalUrl: undefined,\n            couldBeIntercepted: false,\n            prerendered: false,\n            postponed: false,\n            staleTime: -1\n        };\n    }\n}\nexport async function createFetch(url, headers, fetchPriority, signal) {\n    // TODO: In output: \"export\" mode, the headers do nothing. Omit them (and the\n    // cache busting search param) from the request so they're\n    // maximally cacheable.\n    if (process.env.__NEXT_TEST_MODE && fetchPriority !== null) {\n        headers['Next-Test-Fetch-Priority'] = fetchPriority;\n    }\n    if (process.env.NEXT_DEPLOYMENT_ID) {\n        headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID;\n    }\n    const fetchOptions = {\n        // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n        credentials: 'same-origin',\n        headers,\n        priority: fetchPriority || undefined,\n        signal\n    };\n    // `fetchUrl` is slightly different from `url` because we add a cache-busting\n    // search param to it. This should not leak outside of this function, so we\n    // track them separately.\n    let fetchUrl = new URL(url);\n    setCacheBustingSearchParam(fetchUrl, headers);\n    let browserResponse = await fetch(fetchUrl, fetchOptions);\n    // If the server responds with a redirect (e.g. 307), and the redirected\n    // location does not contain the cache busting search param set in the\n    // original request, the response is likely invalid — when following the\n    // redirect, the browser forwards the request headers, but since the cache\n    // busting search param is missing, the server will reject the request due to\n    // a mismatch.\n    //\n    // Ideally, we would be able to intercept the redirect response and perform it\n    // manually, instead of letting the browser automatically follow it, but this\n    // is not allowed by the fetch API.\n    //\n    // So instead, we must \"replay\" the redirect by fetching the new location\n    // again, but this time we'll append the cache busting search param to prevent\n    // a mismatch.\n    //\n    // TODO: We can optimize Next.js's built-in middleware APIs by returning a\n    // custom status code, to prevent the browser from automatically following it.\n    //\n    // This does not affect Server Action-based redirects; those are encoded\n    // differently, as part of the Flight body. It only affects redirects that\n    // occur in a middleware or a third-party proxy.\n    let redirected = browserResponse.redirected;\n    if (process.env.__NEXT_CLIENT_VALIDATE_RSC_REQUEST_HEADERS) {\n        // This is to prevent a redirect loop. Same limit used by Chrome.\n        const MAX_REDIRECTS = 20;\n        for(let n = 0; n < MAX_REDIRECTS; n++){\n            if (!browserResponse.redirected) {\n                break;\n            }\n            const responseUrl = new URL(browserResponse.url, fetchUrl);\n            if (responseUrl.origin !== fetchUrl.origin) {\n                break;\n            }\n            if (responseUrl.searchParams.get(NEXT_RSC_UNION_QUERY) === fetchUrl.searchParams.get(NEXT_RSC_UNION_QUERY)) {\n                break;\n            }\n            // The RSC request was redirected. Assume the response is invalid.\n            //\n            // Append the cache busting search param to the redirected URL and\n            // fetch again.\n            fetchUrl = new URL(responseUrl);\n            setCacheBustingSearchParam(fetchUrl, headers);\n            browserResponse = await fetch(fetchUrl, fetchOptions);\n            // We just performed a manual redirect, so this is now true.\n            redirected = true;\n        }\n    }\n    // Remove the cache busting search param from the response URL, to prevent it\n    // from leaking outside of this function.\n    const responseUrl = new URL(browserResponse.url, fetchUrl);\n    responseUrl.searchParams.delete(NEXT_RSC_UNION_QUERY);\n    const rscResponse = {\n        url: responseUrl.href,\n        // This is true if any redirects occurred, either automatically by the\n        // browser, or manually by us. So it's different from\n        // `browserResponse.redirected`, which only tells us whether the browser\n        // followed a redirect, and only for the last response in the chain.\n        redirected,\n        // These can be copied from the last browser response we received. We\n        // intentionally only expose the subset of fields that are actually used\n        // elsewhere in the codebase.\n        ok: browserResponse.ok,\n        headers: browserResponse.headers,\n        body: browserResponse.body,\n        status: browserResponse.status\n    };\n    return rscResponse;\n}\nexport function createFromNextReadableStream(flightStream) {\n    return createFromReadableStream(flightStream, {\n        callServer,\n        findSourceMapURL\n    });\n}\nfunction createUnclosingPrefetchStream(originalFlightStream) {\n    // When PPR is enabled, prefetch streams may contain references that never\n    // resolve, because that's how we encode dynamic data access. In the decoded\n    // object returned by the Flight client, these are reified into hanging\n    // promises that suspend during render, which is effectively what we want.\n    // The UI resolves when it switches to the dynamic data stream\n    // (via useDeferredValue(dynamic, static)).\n    //\n    // However, the Flight implementation currently errors if the server closes\n    // the response before all the references are resolved. As a cheat to work\n    // around this, we wrap the original stream in a new stream that never closes,\n    // and therefore doesn't error.\n    const reader = originalFlightStream.getReader();\n    return new ReadableStream({\n        async pull (controller) {\n            while(true){\n                const { done, value } = await reader.read();\n                if (!done) {\n                    // Pass to the target stream and keep consuming the Flight response\n                    // from the server.\n                    controller.enqueue(value);\n                    continue;\n                }\n                // The server stream has closed. Exit, but intentionally do not close\n                // the target stream.\n                return;\n            }\n        }\n    });\n}\n\n//# sourceMappingURL=fetch-server-response.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/http-access-fallback/http-access-fallback.js"],"sourcesContent":["export const HTTPAccessErrorStatus = {\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    UNAUTHORIZED: 401\n};\nconst ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));\nexport const HTTP_ERROR_FALLBACK_ERROR_CODE = 'NEXT_HTTP_ERROR_FALLBACK';\n/**\n * Checks an error to determine if it's an error generated by\n * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.\n *\n * @param error the error that may reference a HTTP access error\n * @returns true if the error is a HTTP access error\n */ export function isHTTPAccessFallbackError(error) {\n    if (typeof error !== 'object' || error === null || !('digest' in error) || typeof error.digest !== 'string') {\n        return false;\n    }\n    const [prefix, httpStatus] = error.digest.split(';');\n    return prefix === HTTP_ERROR_FALLBACK_ERROR_CODE && ALLOWED_CODES.has(Number(httpStatus));\n}\nexport function getAccessFallbackHTTPStatus(error) {\n    const httpStatus = error.digest.split(';')[1];\n    return Number(httpStatus);\n}\nexport function getAccessFallbackErrorTypeByStatus(status) {\n    switch(status){\n        case 401:\n            return 'unauthorized';\n        case 403:\n            return 'forbidden';\n        case 404:\n            return 'not-found';\n        default:\n            return;\n    }\n}\n\n//# sourceMappingURL=http-access-fallback.js.map"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,wBAAwB;IACjC,WAAW;IACX,WAAW;IACX,cAAc;AAClB;AACA,MAAM,gBAAgB,IAAI,IAAI,OAAO,MAAM,CAAC;AACrC,MAAM,iCAAiC;AAOnC,SAAS,0BAA0B,KAAK;IAC/C,IAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,CAAC,CAAC,YAAY,KAAK,KAAK,OAAO,MAAM,MAAM,KAAK,UAAU;QACzG,OAAO;IACX;IACA,MAAM,CAAC,QAAQ,WAAW,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;IAChD,OAAO,WAAW,kCAAkC,cAAc,GAAG,CAAC,OAAO;AACjF;AACO,SAAS,4BAA4B,KAAK;IAC7C,MAAM,aAAa,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;IAC7C,OAAO,OAAO;AAClB;AACO,SAAS,mCAAmC,MAAM;IACrD,OAAO;QACH,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX;YACI;IACR;AACJ,EAEA,gDAAgD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/is-next-router-error.js"],"sourcesContent":["import { isHTTPAccessFallbackError } from './http-access-fallback/http-access-fallback';\nimport { isRedirectError } from './redirect-error';\n/**\n * Returns true if the error is a navigation signal error. These errors are\n * thrown by user code to perform navigation operations and interrupt the React\n * render.\n */ export function isNextRouterError(error) {\n    return isRedirectError(error) || isHTTPAccessFallbackError(error);\n}\n\n//# sourceMappingURL=is-next-router-error.js.map"],"names":[],"mappings":";;;;AAAA;;;;;;;;AAMW,SAAS,kBAAkB,KAAK;IACvC,OAAO,gBAAgB,UAAU,IAAA,wTAAyB,EAAC;AAC/D,EAEA,gDAAgD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/handle-isr-error.js"],"sourcesContent":["const workAsyncStorage = typeof window === 'undefined' ? require('../../server/app-render/work-async-storage.external').workAsyncStorage : undefined;\n// if we are revalidating we want to re-throw the error so the\n// function crashes so we can maintain our previous cache\n// instead of caching the error page\nexport function HandleISRError(param) {\n    let { error } = param;\n    if (workAsyncStorage) {\n        const store = workAsyncStorage.getStore();\n        if ((store == null ? void 0 : store.isRevalidate) || (store == null ? void 0 : store.isStaticGeneration)) {\n            console.error(error);\n            throw error;\n        }\n    }\n    return null;\n}\n\n//# sourceMappingURL=handle-isr-error.js.map"],"names":[],"mappings":";;;;AAAA,MAAM,mBAAmB,uCAAgC;;;;KAA+D,gBAAgB,GAAG;AAIpI,SAAS,eAAe,KAAK;IAChC,IAAI,EAAE,KAAK,EAAE,GAAG;IAChB,IAAI,kBAAkB;QAClB,MAAM,QAAQ,iBAAiB,QAAQ;QACvC,IAAI,CAAC,SAAS,OAAO,KAAK,IAAI,MAAM,YAAY,KAAK,CAAC,SAAS,OAAO,KAAK,IAAI,MAAM,kBAAkB,GAAG;YACtG,QAAQ,KAAK,CAAC;YACd,MAAM;QACV;IACJ;IACA,OAAO;AACX,EAEA,4CAA4C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/router/utils/html-bots.js"],"sourcesContent":["// This regex contains the bots that we need to do a blocking render for and can't safely stream the response\n// due to how they parse the DOM. For example, they might explicitly check for metadata in the `head` tag, so we can't stream metadata tags after the `head` was sent.\n// Note: The pattern [\\w-]+-Google captures all Google crawlers with \"-Google\" suffix (e.g., Mediapartners-Google, AdsBot-Google, Storebot-Google)\n// as well as crawlers starting with \"Google-\" (e.g., Google-PageRenderer, Google-InspectionTool)\nexport const HTML_LIMITED_BOT_UA_RE = /[\\w-]+-Google|Google-[\\w-]+|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti|googleweblight/i;\n\n//# sourceMappingURL=html-bots.js.map"],"names":[],"mappings":"AAAA,6GAA6G;AAC7G,sKAAsK;AACtK,kJAAkJ;AAClJ,iGAAiG;;;;;AAC1F,MAAM,yBAAyB,uTAEtC,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 666, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/router/utils/is-bot.js"],"sourcesContent":["import { HTML_LIMITED_BOT_UA_RE } from './html-bots';\n// Bot crawler that will spin up a headless browser and execute JS.\n// Only the main Googlebot search crawler executes JavaScript, not other Google crawlers.\n// x-ref: https://developers.google.com/search/docs/crawling-indexing/google-common-crawlers\n// This regex specifically matches \"Googlebot\" but NOT \"Mediapartners-Google\", \"AdsBot-Google\", etc.\nconst HEADLESS_BROWSER_BOT_UA_RE = /Googlebot(?!-)|Googlebot$/i;\nexport const HTML_LIMITED_BOT_UA_RE_STRING = HTML_LIMITED_BOT_UA_RE.source;\nexport { HTML_LIMITED_BOT_UA_RE };\nfunction isDomBotUA(userAgent) {\n    return HEADLESS_BROWSER_BOT_UA_RE.test(userAgent);\n}\nfunction isHtmlLimitedBotUA(userAgent) {\n    return HTML_LIMITED_BOT_UA_RE.test(userAgent);\n}\nexport function isBot(userAgent) {\n    return isDomBotUA(userAgent) || isHtmlLimitedBotUA(userAgent);\n}\nexport function getBotType(userAgent) {\n    if (isDomBotUA(userAgent)) {\n        return 'dom';\n    }\n    if (isHtmlLimitedBotUA(userAgent)) {\n        return 'html';\n    }\n    return undefined;\n}\n\n//# sourceMappingURL=is-bot.js.map"],"names":[],"mappings":";;;;;;;;AAAA;;AACA,mEAAmE;AACnE,yFAAyF;AACzF,4FAA4F;AAC5F,oGAAoG;AACpG,MAAM,6BAA6B;AAC5B,MAAM,gCAAgC,qRAAsB,CAAC,MAAM;;AAE1E,SAAS,WAAW,SAAS;IACzB,OAAO,2BAA2B,IAAI,CAAC;AAC3C;AACA,SAAS,mBAAmB,SAAS;IACjC,OAAO,qRAAsB,CAAC,IAAI,CAAC;AACvC;AACO,SAAS,MAAM,SAAS;IAC3B,OAAO,WAAW,cAAc,mBAAmB;AACvD;AACO,SAAS,WAAW,SAAS;IAChC,IAAI,WAAW,YAAY;QACvB,OAAO;IACX;IACA,IAAI,mBAAmB,YAAY;QAC/B,OAAO;IACX;IACA,OAAO;AACX,EAEA,kCAAkC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 705, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/error-boundary.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { useUntrackedPathname } from './navigation-untracked';\nimport { isNextRouterError } from './is-next-router-error';\nimport { handleHardNavError } from './nav-failure-handler';\nimport { HandleISRError } from './handle-isr-error';\nimport { isBot } from '../../shared/lib/router/utils/is-bot';\nconst isBotUserAgent = typeof window !== 'undefined' && isBot(window.navigator.userAgent);\nexport class ErrorBoundaryHandler extends React.Component {\n    static getDerivedStateFromError(error) {\n        if (isNextRouterError(error)) {\n            // Re-throw if an expected internal Next.js router error occurs\n            // this means it should be handled by a different boundary (such as a NotFound boundary in a parent segment)\n            throw error;\n        }\n        return {\n            error\n        };\n    }\n    static getDerivedStateFromProps(props, state) {\n        const { error } = state;\n        // if we encounter an error while\n        // a navigation is pending we shouldn't render\n        // the error boundary and instead should fallback\n        // to a hard navigation to attempt recovering\n        if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n            if (error && handleHardNavError(error)) {\n                // clear error so we don't render anything\n                return {\n                    error: null,\n                    previousPathname: props.pathname\n                };\n            }\n        }\n        /**\n     * Handles reset of the error boundary when a navigation happens.\n     * Ensures the error boundary does not stay enabled when navigating to a new page.\n     * Approach of setState in render is safe as it checks the previous pathname and then overrides\n     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders\n     */ if (props.pathname !== state.previousPathname && state.error) {\n            return {\n                error: null,\n                previousPathname: props.pathname\n            };\n        }\n        return {\n            error: state.error,\n            previousPathname: props.pathname\n        };\n    }\n    // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.\n    render() {\n        //When it's bot request, segment level error boundary will keep rendering the children,\n        // the final error will be caught by the root error boundary and determine wether need to apply graceful degrade.\n        if (this.state.error && !isBotUserAgent) {\n            return /*#__PURE__*/ _jsxs(_Fragment, {\n                children: [\n                    /*#__PURE__*/ _jsx(HandleISRError, {\n                        error: this.state.error\n                    }),\n                    this.props.errorStyles,\n                    this.props.errorScripts,\n                    /*#__PURE__*/ _jsx(this.props.errorComponent, {\n                        error: this.state.error,\n                        reset: this.reset\n                    })\n                ]\n            });\n        }\n        return this.props.children;\n    }\n    constructor(props){\n        super(props), this.reset = ()=>{\n            this.setState({\n                error: null\n            });\n        };\n        this.state = {\n            error: null,\n            previousPathname: this.props.pathname\n        };\n    }\n}\n/**\n * Handles errors through `getDerivedStateFromError`.\n * Renders the provided error component and provides a way to `reset` the error boundary state.\n */ /**\n * Renders error boundary with the provided \"errorComponent\" property as the fallback.\n * If no \"errorComponent\" property is provided it renders the children without an error boundary.\n */ export function ErrorBoundary(param) {\n    let { errorComponent, errorStyles, errorScripts, children } = param;\n    // When we're rendering the missing params shell, this will return null. This\n    // is because we won't be rendering any not found boundaries or error\n    // boundaries for the missing params shell. When this runs on the client\n    // (where these errors can occur), we will get the correct pathname.\n    const pathname = useUntrackedPathname();\n    if (errorComponent) {\n        return /*#__PURE__*/ _jsx(ErrorBoundaryHandler, {\n            pathname: pathname,\n            errorComponent: errorComponent,\n            errorStyles: errorStyles,\n            errorScripts: errorScripts,\n            children: children\n        });\n    }\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: children\n    });\n}\n\n//# sourceMappingURL=error-boundary.js.map"],"names":[],"mappings":";;;;;;AACA;AACA;;;;;;AAEA;;;;;;AAEA;AACA;AAPA;;;;;;;;AAQA,MAAM,iBAAiB,gBAAkB,eAAe,IAAA,iRAAK,EAAC,OAAO,SAAS,CAAC,SAAS;AACjF,MAAM,6BAA6B,wQAAK,CAAC,SAAS;IACrD,OAAO,yBAAyB,KAAK,EAAE;QACnC,IAAI,IAAA,qRAAiB,EAAC,QAAQ;YAC1B,+DAA+D;YAC/D,4GAA4G;YAC5G,MAAM;QACV;QACA,OAAO;YACH;QACJ;IACJ;IACA,OAAO,yBAAyB,KAAK,EAAE,KAAK,EAAE;QAC1C,MAAM,EAAE,KAAK,EAAE,GAAG;QAClB,iCAAiC;QACjC,8CAA8C;QAC9C,iDAAiD;QACjD,6CAA6C;QAC7C;;QASA;;;;;KAKH,GAAG,IAAI,MAAM,QAAQ,KAAK,MAAM,gBAAgB,IAAI,MAAM,KAAK,EAAE;YAC1D,OAAO;gBACH,OAAO;gBACP,kBAAkB,MAAM,QAAQ;YACpC;QACJ;QACA,OAAO;YACH,OAAO,MAAM,KAAK;YAClB,kBAAkB,MAAM,QAAQ;QACpC;IACJ;IACA,yIAAyI;IACzI,SAAS;QACL,uFAAuF;QACvF,iHAAiH;QACjH,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,gBAAgB;YACrC,OAAO,WAAW,GAAG,IAAA,uRAAK,EAAC,2RAAS,EAAE;gBAClC,UAAU;oBACN,WAAW,GAAG,IAAA,sRAAI,EAAC,2QAAc,EAAE;wBAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK;oBAC3B;oBACA,IAAI,CAAC,KAAK,CAAC,WAAW;oBACtB,IAAI,CAAC,KAAK,CAAC,YAAY;oBACvB,WAAW,GAAG,IAAA,sRAAI,EAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;wBAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK;wBACvB,OAAO,IAAI,CAAC,KAAK;oBACrB;iBACH;YACL;QACJ;QACA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC9B;IACA,YAAY,KAAK,CAAC;QACd,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG;YACvB,IAAI,CAAC,QAAQ,CAAC;gBACV,OAAO;YACX;QACJ;QACA,IAAI,CAAC,KAAK,GAAG;YACT,OAAO;YACP,kBAAkB,IAAI,CAAC,KAAK,CAAC,QAAQ;QACzC;IACJ;AACJ;AAOW,SAAS,cAAc,KAAK;IACnC,IAAI,EAAE,cAAc,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG;IAC9D,6EAA6E;IAC7E,qEAAqE;IACrE,wEAAwE;IACxE,oEAAoE;IACpE,MAAM,WAAW;IACjB,IAAI,gBAAgB;QAChB,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,sBAAsB;YAC5C,UAAU;YACV,gBAAgB;YAChB,aAAa;YACb,cAAc;YACd,UAAU;QACd;IACJ;IACA,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,2RAAS,EAAE;QACjC,UAAU;IACd;AACJ,EAEA,0CAA0C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/match-segments.js"],"sourcesContent":["export const matchSegment = (existingSegment, segment)=>{\n    // segment is either Array or string\n    if (typeof existingSegment === 'string') {\n        if (typeof segment === 'string') {\n            // Common case: segment is just a string\n            return existingSegment === segment;\n        }\n        return false;\n    }\n    if (typeof segment === 'string') {\n        return false;\n    }\n    return existingSegment[0] === segment[0] && existingSegment[1] === segment[1];\n};\n\n//# sourceMappingURL=match-segments.js.map"],"names":[],"mappings":";;;;AAAO,MAAM,eAAe,CAAC,iBAAiB;IAC1C,oCAAoC;IACpC,IAAI,OAAO,oBAAoB,UAAU;QACrC,IAAI,OAAO,YAAY,UAAU;YAC7B,wCAAwC;YACxC,OAAO,oBAAoB;QAC/B;QACA,OAAO;IACX;IACA,IAAI,OAAO,YAAY,UAAU;QAC7B,OAAO;IACX;IACA,OAAO,eAAe,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,IAAI,eAAe,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE;AACjF,GAEA,0CAA0C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/router/utils/disable-smooth-scroll.js"],"sourcesContent":["import { warnOnce } from '../../utils/warn-once';\n/**\n * Run function with `scroll-behavior: auto` applied to `<html/>`.\n * This css change will be reverted after the function finishes.\n */ export function disableSmoothScrollDuringRouteTransition(fn, options) {\n    if (options === void 0) options = {};\n    // if only the hash is changed, we don't need to disable smooth scrolling\n    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX\n    if (options.onlyHashChange) {\n        fn();\n        return;\n    }\n    const htmlElement = document.documentElement;\n    const hasDataAttribute = htmlElement.dataset.scrollBehavior === 'smooth';\n    // Since this is a breaking change, this is temporarily flagged\n    // and will be false by default.\n    // In the next major (v16), this will be automatically enabled\n    if (process.env.__NEXT_OPTIMIZE_ROUTER_SCROLL) {\n        if (!hasDataAttribute) {\n            // No smooth scrolling configured, run directly without style manipulation\n            fn();\n            return;\n        }\n    } else {\n        // Old behavior: always manipulate styles, but warn about upcoming change\n        // Warn if smooth scrolling is detected but no data attribute is present\n        if (process.env.NODE_ENV === 'development' && !hasDataAttribute && getComputedStyle(htmlElement).scrollBehavior === 'smooth') {\n            warnOnce('Detected `scroll-behavior: smooth` on the `<html>` element. In a future version, ' + 'Next.js will no longer automatically disable smooth scrolling during route transitions. ' + 'To prepare for this change, add `data-scroll-behavior=\"smooth\"` to your <html> element. ' + 'Learn more: https://nextjs.org/docs/messages/missing-data-scroll-behavior');\n        }\n    }\n    // Proceed with temporarily disabling smooth scrolling\n    const existing = htmlElement.style.scrollBehavior;\n    htmlElement.style.scrollBehavior = 'auto';\n    if (!options.dontForceLayout) {\n        // In Chrome-based browsers we need to force reflow before calling `scrollTo`.\n        // Otherwise it will not pickup the change in scrollBehavior\n        // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042\n        htmlElement.getClientRects();\n    }\n    fn();\n    htmlElement.style.scrollBehavior = existing;\n}\n\n//# sourceMappingURL=disable-smooth-scroll.js.map"],"names":[],"mappings":";;;;;;;;;;AAIW,SAAS,yCAAyC,EAAE,EAAE,OAAO;IACpE,IAAI,YAAY,KAAK,GAAG,UAAU,CAAC;IACnC,yEAAyE;IACzE,6FAA6F;IAC7F,IAAI,QAAQ,cAAc,EAAE;QACxB;QACA;IACJ;IACA,MAAM,cAAc,SAAS,eAAe;IAC5C,MAAM,mBAAmB,YAAY,OAAO,CAAC,cAAc,KAAK;IAChE,+DAA+D;IAC/D,gCAAgC;IAChC,8DAA8D;IAC9D;;SAMO;QACH,yEAAyE;QACzE,wEAAwE;QACxE,IAAI,oDAAyB,iBAAiB,CAAC,oBAAoB,iBAAiB,aAAa,cAAc,KAAK,UAAU;YAC1H,SAAS,sFAAsF,6FAA6F,6FAA6F;QAC7R;IACJ;IACA,sDAAsD;IACtD,MAAM,WAAW,YAAY,KAAK,CAAC,cAAc;IACjD,YAAY,KAAK,CAAC,cAAc,GAAG;IACnC,IAAI,CAAC,QAAQ,eAAe,EAAE;QAC1B,8EAA8E;QAC9E,4DAA4D;QAC5D,yFAAyF;QACzF,YAAY,cAAc;IAC9B;IACA;IACA,YAAY,KAAK,CAAC,cAAc,GAAG;AACvC,EAEA,iDAAiD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 897, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/http-access-fallback/error-boundary.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n/**\n * HTTPAccessFallbackBoundary is a boundary that catches errors and renders a\n * fallback component for HTTP errors.\n *\n * It receives the status code, and determine if it should render fallbacks for few HTTP 4xx errors.\n *\n * e.g. 404\n * 404 represents not found, and the fallback component pair contains the component and its styles.\n *\n */ import React, { useContext } from 'react';\nimport { useUntrackedPathname } from '../navigation-untracked';\nimport { HTTPAccessErrorStatus, getAccessFallbackHTTPStatus, getAccessFallbackErrorTypeByStatus, isHTTPAccessFallbackError } from './http-access-fallback';\nimport { warnOnce } from '../../../shared/lib/utils/warn-once';\nimport { MissingSlotContext } from '../../../shared/lib/app-router-context.shared-runtime';\nclass HTTPAccessFallbackErrorBoundary extends React.Component {\n    componentDidCatch() {\n        if (process.env.NODE_ENV === 'development' && this.props.missingSlots && this.props.missingSlots.size > 0 && // A missing children slot is the typical not-found case, so no need to warn\n        !this.props.missingSlots.has('children')) {\n            let warningMessage = 'No default component was found for a parallel route rendered on this page. Falling back to nearest NotFound boundary.\\n' + 'Learn more: https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\\n\\n';\n            const formattedSlots = Array.from(this.props.missingSlots).sort((a, b)=>a.localeCompare(b)).map((slot)=>\"@\" + slot).join(', ');\n            warningMessage += 'Missing slots: ' + formattedSlots;\n            warnOnce(warningMessage);\n        }\n    }\n    static getDerivedStateFromError(error) {\n        if (isHTTPAccessFallbackError(error)) {\n            const httpStatus = getAccessFallbackHTTPStatus(error);\n            return {\n                triggeredStatus: httpStatus\n            };\n        }\n        // Re-throw if error is not for 404\n        throw error;\n    }\n    static getDerivedStateFromProps(props, state) {\n        /**\n     * Handles reset of the error boundary when a navigation happens.\n     * Ensures the error boundary does not stay enabled when navigating to a new page.\n     * Approach of setState in render is safe as it checks the previous pathname and then overrides\n     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders\n     */ if (props.pathname !== state.previousPathname && state.triggeredStatus) {\n            return {\n                triggeredStatus: undefined,\n                previousPathname: props.pathname\n            };\n        }\n        return {\n            triggeredStatus: state.triggeredStatus,\n            previousPathname: props.pathname\n        };\n    }\n    render() {\n        const { notFound, forbidden, unauthorized, children } = this.props;\n        const { triggeredStatus } = this.state;\n        const errorComponents = {\n            [HTTPAccessErrorStatus.NOT_FOUND]: notFound,\n            [HTTPAccessErrorStatus.FORBIDDEN]: forbidden,\n            [HTTPAccessErrorStatus.UNAUTHORIZED]: unauthorized\n        };\n        if (triggeredStatus) {\n            const isNotFound = triggeredStatus === HTTPAccessErrorStatus.NOT_FOUND && notFound;\n            const isForbidden = triggeredStatus === HTTPAccessErrorStatus.FORBIDDEN && forbidden;\n            const isUnauthorized = triggeredStatus === HTTPAccessErrorStatus.UNAUTHORIZED && unauthorized;\n            // If there's no matched boundary in this layer, keep throwing the error by rendering the children\n            if (!(isNotFound || isForbidden || isUnauthorized)) {\n                return children;\n            }\n            return /*#__PURE__*/ _jsxs(_Fragment, {\n                children: [\n                    /*#__PURE__*/ _jsx(\"meta\", {\n                        name: \"robots\",\n                        content: \"noindex\"\n                    }),\n                    process.env.NODE_ENV === 'development' && /*#__PURE__*/ _jsx(\"meta\", {\n                        name: \"boundary-next-error\",\n                        content: getAccessFallbackErrorTypeByStatus(triggeredStatus)\n                    }),\n                    errorComponents[triggeredStatus]\n                ]\n            });\n        }\n        return children;\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            triggeredStatus: undefined,\n            previousPathname: props.pathname\n        };\n    }\n}\nexport function HTTPAccessFallbackBoundary(param) {\n    let { notFound, forbidden, unauthorized, children } = param;\n    // When we're rendering the missing params shell, this will return null. This\n    // is because we won't be rendering any not found boundaries or error\n    // boundaries for the missing params shell. When this runs on the client\n    // (where these error can occur), we will get the correct pathname.\n    const pathname = useUntrackedPathname();\n    const missingSlots = useContext(MissingSlotContext);\n    const hasErrorFallback = !!(notFound || forbidden || unauthorized);\n    if (hasErrorFallback) {\n        return /*#__PURE__*/ _jsx(HTTPAccessFallbackErrorBoundary, {\n            pathname: pathname,\n            notFound: notFound,\n            forbidden: forbidden,\n            unauthorized: unauthorized,\n            missingSlots: missingSlots,\n            children: children\n        });\n    }\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: children\n    });\n}\n\n//# sourceMappingURL=error-boundary.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1035, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/router-reducer/create-router-cache-key.js"],"sourcesContent":["import { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment';\nexport function createRouterCacheKey(segment, withoutSearchParameters) {\n    if (withoutSearchParameters === void 0) withoutSearchParameters = false;\n    // if the segment is an array, it means it's a dynamic segment\n    // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.\n    if (Array.isArray(segment)) {\n        return segment[0] + \"|\" + segment[1] + \"|\" + segment[2];\n    }\n    // Page segments might have search parameters, ie __PAGE__?foo=bar\n    // When `withoutSearchParameters` is true, we only want to return the page segment\n    if (withoutSearchParameters && segment.startsWith(PAGE_SEGMENT_KEY)) {\n        return PAGE_SEGMENT_KEY;\n    }\n    return segment;\n}\n\n//# sourceMappingURL=create-router-cache-key.js.map"],"names":[],"mappings":";;;;;;;;;;AACO,SAAS,qBAAqB,OAAO,EAAE,uBAAuB;IACjE,IAAI,4BAA4B,KAAK,GAAG,0BAA0B;IAClE,8DAA8D;IAC9D,uGAAuG;IACvG,IAAI,MAAM,OAAO,CAAC,UAAU;QACxB,OAAO,OAAO,CAAC,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE;IAC3D;IACA,kEAAkE;IAClE,kFAAkF;IAClF,IAAI,2BAA2B,QAAQ,UAAU,CAAC,mBAAmB;QACjE,OAAO;IACX;IACA,OAAO;AACX,EAEA,mDAAmD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1063, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js"],"sourcesContent":["/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */ export function ensureLeadingSlash(path) {\n    return path.startsWith('/') ? path : \"/\" + path;\n}\n\n//# sourceMappingURL=ensure-leading-slash.js.map"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAAU,SAAS,mBAAmB,IAAI;IACvC,OAAO,KAAK,UAAU,CAAC,OAAO,OAAO,MAAM;AAC/C,EAEA,gDAAgD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1077, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js"],"sourcesContent":["import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash';\nimport { isGroupSegment } from '../../segment';\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */ export function normalizeAppPath(route) {\n    return ensureLeadingSlash(route.split('/').reduce((pathname, segment, index, segments)=>{\n        // Empty segments are ignored.\n        if (!segment) {\n            return pathname;\n        }\n        // Groups are ignored.\n        if (isGroupSegment(segment)) {\n            return pathname;\n        }\n        // Parallel segments are ignored.\n        if (segment[0] === '@') {\n            return pathname;\n        }\n        // The last segment (if it's a leaf) should be ignored.\n        if ((segment === 'page' || segment === 'route') && index === segments.length - 1) {\n            return pathname;\n        }\n        return pathname + \"/\" + segment;\n    }, ''));\n}\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */ export function normalizeRscURL(url) {\n    return url.replace(/\\.rsc($|\\?)/, // $1 ensures `?` is preserved\n    '$1');\n}\n\n//# sourceMappingURL=app-paths.js.map"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAoBW,SAAS,iBAAiB,KAAK;IACtC,OAAO,IAAA,4RAAkB,EAAC,MAAM,KAAK,CAAC,KAAK,MAAM,CAAC,CAAC,UAAU,SAAS,OAAO;QACzE,8BAA8B;QAC9B,IAAI,CAAC,SAAS;YACV,OAAO;QACX;QACA,sBAAsB;QACtB,IAAI,eAAe,UAAU;YACzB,OAAO;QACX;QACA,iCAAiC;QACjC,IAAI,OAAO,CAAC,EAAE,KAAK,KAAK;YACpB,OAAO;QACX;QACA,uDAAuD;QACvD,IAAI,CAAC,YAAY,UAAU,YAAY,OAAO,KAAK,UAAU,SAAS,MAAM,GAAG,GAAG;YAC9E,OAAO;QACX;QACA,OAAO,WAAW,MAAM;IAC5B,GAAG;AACP;AAIW,SAAS,gBAAgB,GAAG;IACnC,OAAO,IAAI,OAAO,CAAC,eACnB;AACJ,EAEA,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/router/utils/interception-routes.js"],"sourcesContent":["import { normalizeAppPath } from './app-paths';\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n    '(..)(..)',\n    '(.)',\n    '(..)',\n    '(...)'\n];\nexport function isInterceptionRouteAppPath(path) {\n    // TODO-APP: add more serious validation\n    return path.split('/').find((segment)=>INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m))) !== undefined;\n}\nexport function extractInterceptionRouteInformation(path) {\n    let interceptingRoute, marker, interceptedRoute;\n    for (const segment of path.split('/')){\n        marker = INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n        if (marker) {\n            ;\n            [interceptingRoute, interceptedRoute] = path.split(marker, 2);\n            break;\n        }\n    }\n    if (!interceptingRoute || !marker || !interceptedRoute) {\n        throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>\"), \"__NEXT_ERROR_CODE\", {\n            value: \"E269\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n    ;\n    switch(marker){\n        case '(.)':\n            // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n            if (interceptingRoute === '/') {\n                interceptedRoute = \"/\" + interceptedRoute;\n            } else {\n                interceptedRoute = interceptingRoute + '/' + interceptedRoute;\n            }\n            break;\n        case '(..)':\n            // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n            if (interceptingRoute === '/') {\n                throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Cannot use (..) marker at the root level, use (.) instead.\"), \"__NEXT_ERROR_CODE\", {\n                    value: \"E207\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            interceptedRoute = interceptingRoute.split('/').slice(0, -1).concat(interceptedRoute).join('/');\n            break;\n        case '(...)':\n            // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n            interceptedRoute = '/' + interceptedRoute;\n            break;\n        case '(..)(..)':\n            // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n            const splitInterceptingRoute = interceptingRoute.split('/');\n            if (splitInterceptingRoute.length <= 2) {\n                throw Object.defineProperty(new Error(\"Invalid interception route: \" + path + \". Cannot use (..)(..) marker at the root level or one level up.\"), \"__NEXT_ERROR_CODE\", {\n                    value: \"E486\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            interceptedRoute = splitInterceptingRoute.slice(0, -2).concat(interceptedRoute).join('/');\n            break;\n        default:\n            throw Object.defineProperty(new Error('Invariant: unexpected marker'), \"__NEXT_ERROR_CODE\", {\n                value: \"E112\",\n                enumerable: false,\n                configurable: true\n            });\n    }\n    return {\n        interceptingRoute,\n        interceptedRoute\n    };\n}\n\n//# sourceMappingURL=interception-routes.js.map"],"names":[],"mappings":";;;;;;;;AAAA;;AAEO,MAAM,6BAA6B;IACtC;IACA;IACA;IACA;CACH;AACM,SAAS,2BAA2B,IAAI;IAC3C,wCAAwC;IACxC,OAAO,KAAK,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,UAAU,2BAA2B,IAAI,CAAC,CAAC,IAAI,QAAQ,UAAU,CAAC,SAAS;AAC5G;AACO,SAAS,oCAAoC,IAAI;IACpD,IAAI,mBAAmB,QAAQ;IAC/B,KAAK,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK;QAClC,SAAS,2BAA2B,IAAI,CAAC,CAAC,IAAI,QAAQ,UAAU,CAAC;QACjE,IAAI,QAAQ;;YAER,CAAC,mBAAmB,iBAAiB,GAAG,KAAK,KAAK,CAAC,QAAQ;YAC3D;QACJ;IACJ;IACA,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,kBAAkB;QACpD,MAAM,OAAO,cAAc,CAAC,IAAI,MAAM,iCAAiC,OAAO,sFAAsF,qBAAqB;YACrL,OAAO;YACP,YAAY;YACZ,cAAc;QAClB;IACJ;IACA,oBAAoB,IAAA,+QAAgB,EAAC,mBAAmB,iDAAiD;;IAEzG,OAAO;QACH,KAAK;YACD,oIAAoI;YACpI,IAAI,sBAAsB,KAAK;gBAC3B,mBAAmB,MAAM;YAC7B,OAAO;gBACH,mBAAmB,oBAAoB,MAAM;YACjD;YACA;QACJ,KAAK;YACD,uHAAuH;YACvH,IAAI,sBAAsB,KAAK;gBAC3B,MAAM,OAAO,cAAc,CAAC,IAAI,MAAM,iCAAiC,OAAO,iEAAiE,qBAAqB;oBAChK,OAAO;oBACP,YAAY;oBACZ,cAAc;gBAClB;YACJ;YACA,mBAAmB,kBAAkB,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,kBAAkB,IAAI,CAAC;YAC3F;QACJ,KAAK;YACD,kIAAkI;YAClI,mBAAmB,MAAM;YACzB;QACJ,KAAK;YACD,iIAAiI;YACjI,MAAM,yBAAyB,kBAAkB,KAAK,CAAC;YACvD,IAAI,uBAAuB,MAAM,IAAI,GAAG;gBACpC,MAAM,OAAO,cAAc,CAAC,IAAI,MAAM,iCAAiC,OAAO,oEAAoE,qBAAqB;oBACnK,OAAO;oBACP,YAAY;oBACZ,cAAc;gBAClB;YACJ;YACA,mBAAmB,uBAAuB,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,kBAAkB,IAAI,CAAC;YACrF;QACJ;YACI,MAAM,OAAO,cAAc,CAAC,IAAI,MAAM,iCAAiC,qBAAqB;gBACxF,OAAO;gBACP,YAAY;gBACZ,cAAc;YAClB;IACR;IACA,OAAO;QACH;QACA;IACJ;AACJ,EAEA,+CAA+C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1210, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/router-reducer/reducers/has-interception-route-in-current-tree.js"],"sourcesContent":["import { isInterceptionRouteAppPath } from '../../../../shared/lib/router/utils/interception-routes';\nexport function hasInterceptionRouteInCurrentTree(param) {\n    let [segment, parallelRoutes] = param;\n    // If we have a dynamic segment, it's marked as an interception route by the presence of the `i` suffix.\n    if (Array.isArray(segment) && (segment[2] === 'di' || segment[2] === 'ci')) {\n        return true;\n    }\n    // If segment is not an array, apply the existing string-based check\n    if (typeof segment === 'string' && isInterceptionRouteAppPath(segment)) {\n        return true;\n    }\n    // Iterate through parallelRoutes if they exist\n    if (parallelRoutes) {\n        for(const key in parallelRoutes){\n            if (hasInterceptionRouteInCurrentTree(parallelRoutes[key])) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=has-interception-route-in-current-tree.js.map"],"names":[],"mappings":";;;;AAAA;;AACO,SAAS,kCAAkC,KAAK;IACnD,IAAI,CAAC,SAAS,eAAe,GAAG;IAChC,wGAAwG;IACxG,IAAI,MAAM,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,KAAK,QAAQ,OAAO,CAAC,EAAE,KAAK,IAAI,GAAG;QACxE,OAAO;IACX;IACA,oEAAoE;IACpE,IAAI,OAAO,YAAY,YAAY,IAAA,mSAA0B,EAAC,UAAU;QACpE,OAAO;IACX;IACA,+CAA+C;IAC/C,IAAI,gBAAgB;QAChB,IAAI,MAAM,OAAO,eAAe;YAC5B,IAAI,kCAAkC,cAAc,CAAC,IAAI,GAAG;gBACxD,OAAO;YACX;QACJ;IACJ;IACA,OAAO;AACX,EAEA,kEAAkE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1240, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/bfcache.js"],"sourcesContent":["import { useState } from 'react';\n// When the flag is disabled, only track the currently active tree\nconst MAX_BF_CACHE_ENTRIES = process.env.__NEXT_ROUTER_BF_CACHE ? 3 : 1;\n/**\n * Keeps track of the most recent N trees (FlightRouterStates) that were active\n * at a certain segment level. E.g. for a segment \"/a/b/[param]\", this hook\n * tracks the last N param values that the router rendered for N.\n *\n * The result of this hook precisely determines the number and order of\n * trees that are rendered in parallel at their segment level.\n *\n * The purpose of this cache is to we can preserve the React and DOM state of\n * some number of inactive trees, by rendering them in an <Activity> boundary.\n * That means it would not make sense for the the lifetime of the cache to be\n * any longer than the lifetime of the React tree; e.g. if the hook were\n * unmounted, then the React tree would be, too. So, we use React state to\n * manage it.\n *\n * Note that we don't store the RSC data for the cache entries in this hook —\n * the data for inactive segments is stored in the parent CacheNode, which\n * *does* have a longer lifetime than the React tree. This hook only determines\n * which of those trees should have their *state* preserved, by <Activity>.\n */ export function useRouterBFCache(activeTree, activeStateKey) {\n    // The currently active entry. The entries form a linked list, sorted in\n    // order of most recently active. This allows us to reuse parts of the list\n    // without cloning, unless there's a reordering or removal.\n    // TODO: Once we start tracking back/forward history at each route level,\n    // we should use the history order instead. In other words, when traversing\n    // to an existing entry as a result of a popstate event, we should maintain\n    // the existing order instead of moving it to the front of the list. I think\n    // an initial implementation of this could be to pass an incrementing id\n    // to history.pushState/replaceState, then use that here for ordering.\n    const [prevActiveEntry, setPrevActiveEntry] = useState(()=>{\n        const initialEntry = {\n            tree: activeTree,\n            stateKey: activeStateKey,\n            next: null\n        };\n        return initialEntry;\n    });\n    if (prevActiveEntry.tree === activeTree) {\n        // Fast path. The active tree hasn't changed, so we can reuse the\n        // existing state.\n        return prevActiveEntry;\n    }\n    // The route tree changed. Note that this doesn't mean that the tree changed\n    // *at this level* — the change may be due to a child route. Either way, we\n    // need to either add or update the router tree in the bfcache.\n    //\n    // The rest of the code looks more complicated than it actually is because we\n    // can't mutate the state in place; we have to copy-on-write.\n    // Create a new entry for the active cache key. This is the head of the new\n    // linked list.\n    const newActiveEntry = {\n        tree: activeTree,\n        stateKey: activeStateKey,\n        next: null\n    };\n    // We need to append the old list onto the new list. If the head of the new\n    // list was already present in the cache, then we'll need to clone everything\n    // that came before it. Then we can reuse the rest.\n    let n = 1;\n    let oldEntry = prevActiveEntry;\n    let clonedEntry = newActiveEntry;\n    while(oldEntry !== null && n < MAX_BF_CACHE_ENTRIES){\n        if (oldEntry.stateKey === activeStateKey) {\n            // Fast path. This entry in the old list that corresponds to the key that\n            // is now active. We've already placed a clone of this entry at the front\n            // of the new list. We can reuse the rest of the old list without cloning.\n            // NOTE: We don't need to worry about eviction in this case because we\n            // haven't increased the size of the cache, and we assume the max size\n            // is constant across renders. If we were to change it to a dynamic limit,\n            // then the implementation would need to account for that.\n            clonedEntry.next = oldEntry.next;\n            break;\n        } else {\n            // Clone the entry and append it to the list.\n            n++;\n            const entry = {\n                tree: oldEntry.tree,\n                stateKey: oldEntry.stateKey,\n                next: null\n            };\n            clonedEntry.next = entry;\n            clonedEntry = entry;\n        }\n        oldEntry = oldEntry.next;\n    }\n    setPrevActiveEntry(newActiveEntry);\n    return newActiveEntry;\n}\n\n//# sourceMappingURL=bfcache.js.map"],"names":[],"mappings":";;;;AAAA;;AACA,kEAAkE;AAClE,MAAM,uBAAuB,sCAAqC,0BAAI;AAoB3D,SAAS,iBAAiB,UAAU,EAAE,cAAc;IAC3D,wEAAwE;IACxE,2EAA2E;IAC3E,2DAA2D;IAC3D,yEAAyE;IACzE,2EAA2E;IAC3E,2EAA2E;IAC3E,4EAA4E;IAC5E,wEAAwE;IACxE,sEAAsE;IACtE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,IAAA,yQAAQ,EAAC;QACnD,MAAM,eAAe;YACjB,MAAM;YACN,UAAU;YACV,MAAM;QACV;QACA,OAAO;IACX;IACA,IAAI,gBAAgB,IAAI,KAAK,YAAY;QACrC,iEAAiE;QACjE,kBAAkB;QAClB,OAAO;IACX;IACA,4EAA4E;IAC5E,2EAA2E;IAC3E,+DAA+D;IAC/D,EAAE;IACF,6EAA6E;IAC7E,6DAA6D;IAC7D,2EAA2E;IAC3E,eAAe;IACf,MAAM,iBAAiB;QACnB,MAAM;QACN,UAAU;QACV,MAAM;IACV;IACA,2EAA2E;IAC3E,6EAA6E;IAC7E,mDAAmD;IACnD,IAAI,IAAI;IACR,IAAI,WAAW;IACf,IAAI,cAAc;IAClB,MAAM,aAAa,QAAQ,IAAI,qBAAqB;QAChD,IAAI,SAAS,QAAQ,KAAK,gBAAgB;YACtC,yEAAyE;YACzE,yEAAyE;YACzE,0EAA0E;YAC1E,sEAAsE;YACtE,sEAAsE;YACtE,0EAA0E;YAC1E,0DAA0D;YAC1D,YAAY,IAAI,GAAG,SAAS,IAAI;YAChC;QACJ,OAAO;YACH,6CAA6C;YAC7C;YACA,MAAM,QAAQ;gBACV,MAAM,SAAS,IAAI;gBACnB,UAAU,SAAS,QAAQ;gBAC3B,MAAM;YACV;YACA,YAAY,IAAI,GAAG;YACnB,cAAc;QAClB;QACA,WAAW,SAAS,IAAI;IAC5B;IACA,mBAAmB;IACnB,OAAO;AACX,EAEA,mCAAmC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1321, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/layout-router.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ACTION_SERVER_PATCH } from './router-reducer/router-reducer-types';\nimport React, { useContext, use, startTransition, Suspense, useDeferredValue } from 'react';\nimport ReactDOM from 'react-dom';\nimport { LayoutRouterContext, GlobalLayoutRouterContext, TemplateContext } from '../../shared/lib/app-router-context.shared-runtime';\nimport { fetchServerResponse } from './router-reducer/fetch-server-response';\nimport { unresolvedThenable } from './unresolved-thenable';\nimport { ErrorBoundary } from './error-boundary';\nimport { matchSegment } from './match-segments';\nimport { disableSmoothScrollDuringRouteTransition } from '../../shared/lib/router/utils/disable-smooth-scroll';\nimport { RedirectBoundary } from './redirect-boundary';\nimport { HTTPAccessFallbackBoundary } from './http-access-fallback/error-boundary';\nimport { createRouterCacheKey } from './router-reducer/create-router-cache-key';\nimport { hasInterceptionRouteInCurrentTree } from './router-reducer/reducers/has-interception-route-in-current-tree';\nimport { dispatchAppRouterAction } from './use-action-queue';\nimport { useRouterBFCache } from './bfcache';\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths';\nconst Activity = process.env.__NEXT_ROUTER_BF_CACHE ? require('react').unstable_Activity : null;\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */ function walkAddRefetch(segmentPathToWalk, treeToRecreate) {\n    if (segmentPathToWalk) {\n        const [segment, parallelRouteKey] = segmentPathToWalk;\n        const isLast = segmentPathToWalk.length === 2;\n        if (matchSegment(treeToRecreate[0], segment)) {\n            if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n                if (isLast) {\n                    const subTree = walkAddRefetch(undefined, treeToRecreate[1][parallelRouteKey]);\n                    return [\n                        treeToRecreate[0],\n                        {\n                            ...treeToRecreate[1],\n                            [parallelRouteKey]: [\n                                subTree[0],\n                                subTree[1],\n                                subTree[2],\n                                'refetch'\n                            ]\n                        }\n                    ];\n                }\n                return [\n                    treeToRecreate[0],\n                    {\n                        ...treeToRecreate[1],\n                        [parallelRouteKey]: walkAddRefetch(segmentPathToWalk.slice(2), treeToRecreate[1][parallelRouteKey])\n                    }\n                ];\n            }\n        }\n    }\n    return treeToRecreate;\n}\nconst __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available\n/**\n * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning\n */ function findDOMNode(instance) {\n    // Tree-shake for server bundle\n    if (typeof window === 'undefined') return null;\n    // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.\n    // We need to lazily reference it.\n    const internal_reactDOMfindDOMNode = __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode;\n    return internal_reactDOMfindDOMNode(instance);\n}\nconst rectProperties = [\n    'bottom',\n    'height',\n    'left',\n    'right',\n    'top',\n    'width',\n    'x',\n    'y'\n];\n/**\n * Check if a HTMLElement is hidden or fixed/sticky position\n */ function shouldSkipElement(element) {\n    // we ignore fixed or sticky positioned elements since they'll likely pass the \"in-viewport\" check\n    // and will result in a situation we bail on scroll because of something like a fixed nav,\n    // even though the actual page content is offscreen\n    if ([\n        'sticky',\n        'fixed'\n    ].includes(getComputedStyle(element).position)) {\n        if (process.env.NODE_ENV === 'development') {\n            console.warn('Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:', element);\n        }\n        return true;\n    }\n    // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`\n    // because `offsetParent` doesn't consider document/body\n    const rect = element.getBoundingClientRect();\n    return rectProperties.every((item)=>rect[item] === 0);\n}\n/**\n * Check if the top corner of the HTMLElement is in the viewport.\n */ function topOfElementInViewport(element, viewportHeight) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0 && rect.top <= viewportHeight;\n}\n/**\n * Find the DOM node for a hash fragment.\n * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.\n * If the hash fragment is an id, the page has to scroll to the element with that id.\n * If the hash fragment is a name, the page has to scroll to the first element with that name.\n */ function getHashFragmentDomNode(hashFragment) {\n    // If the hash fragment is `top` the page has to scroll to the top of the page.\n    if (hashFragment === 'top') {\n        return document.body;\n    }\n    var _document_getElementById;\n    // If the hash fragment is an id, the page has to scroll to the element with that id.\n    return (_document_getElementById = document.getElementById(hashFragment)) != null ? _document_getElementById : // If the hash fragment is a name, the page has to scroll to the first element with that name.\n    document.getElementsByName(hashFragment)[0];\n}\nclass InnerScrollAndFocusHandler extends React.Component {\n    componentDidMount() {\n        this.handlePotentialScroll();\n    }\n    componentDidUpdate() {\n        // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.\n        if (this.props.focusAndScrollRef.apply) {\n            this.handlePotentialScroll();\n        }\n    }\n    render() {\n        return this.props.children;\n    }\n    constructor(...args){\n        super(...args), this.handlePotentialScroll = ()=>{\n            // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n            const { focusAndScrollRef, segmentPath } = this.props;\n            if (focusAndScrollRef.apply) {\n                // segmentPaths is an array of segment paths that should be scrolled to\n                // if the current segment path is not in the array, the scroll is not applied\n                // unless the array is empty, in which case the scroll is always applied\n                if (focusAndScrollRef.segmentPaths.length !== 0 && !focusAndScrollRef.segmentPaths.some((scrollRefSegmentPath)=>segmentPath.every((segment, index)=>matchSegment(segment, scrollRefSegmentPath[index])))) {\n                    return;\n                }\n                let domNode = null;\n                const hashFragment = focusAndScrollRef.hashFragment;\n                if (hashFragment) {\n                    domNode = getHashFragmentDomNode(hashFragment);\n                }\n                // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.\n                // This already caused a bug where the first child was a <link/> in head.\n                if (!domNode) {\n                    domNode = findDOMNode(this);\n                }\n                // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.\n                if (!(domNode instanceof Element)) {\n                    return;\n                }\n                // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.\n                // If the element is skipped, try to select the next sibling and try again.\n                while(!(domNode instanceof HTMLElement) || shouldSkipElement(domNode)){\n                    if (process.env.NODE_ENV !== 'production') {\n                        var _domNode_parentElement;\n                        if (((_domNode_parentElement = domNode.parentElement) == null ? void 0 : _domNode_parentElement.localName) === 'head') {\n                        // TODO: We enter this state when metadata was rendered as part of the page or via Next.js.\n                        // This is always a bug in Next.js and caused by React hoisting metadata.\n                        // We need to replace `findDOMNode` in favor of Fragment Refs (when available) so that we can skip over metadata.\n                        }\n                    }\n                    // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.\n                    if (domNode.nextElementSibling === null) {\n                        return;\n                    }\n                    domNode = domNode.nextElementSibling;\n                }\n                // State is mutated to ensure that the focus and scroll is applied only once.\n                focusAndScrollRef.apply = false;\n                focusAndScrollRef.hashFragment = null;\n                focusAndScrollRef.segmentPaths = [];\n                disableSmoothScrollDuringRouteTransition(()=>{\n                    // In case of hash scroll, we only need to scroll the element into view\n                    if (hashFragment) {\n                        ;\n                        domNode.scrollIntoView();\n                        return;\n                    }\n                    // Store the current viewport height because reading `clientHeight` causes a reflow,\n                    // and it won't change during this function.\n                    const htmlElement = document.documentElement;\n                    const viewportHeight = htmlElement.clientHeight;\n                    // If the element's top edge is already in the viewport, exit early.\n                    if (topOfElementInViewport(domNode, viewportHeight)) {\n                        return;\n                    }\n                    // Otherwise, try scrolling go the top of the document to be backward compatible with pages\n                    // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)\n                    // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left\n                    // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically\n                    htmlElement.scrollTop = 0;\n                    // Scroll to domNode if domNode is not in viewport when scrolled to top of document\n                    if (!topOfElementInViewport(domNode, viewportHeight)) {\n                        // Scroll into view doesn't scroll horizontally by default when not needed\n                        ;\n                        domNode.scrollIntoView();\n                    }\n                }, {\n                    // We will force layout by querying domNode position\n                    dontForceLayout: true,\n                    onlyHashChange: focusAndScrollRef.onlyHashChange\n                });\n                // Mutate after scrolling so that it can be read by `disableSmoothScrollDuringRouteTransition`\n                focusAndScrollRef.onlyHashChange = false;\n                // Set focus on the element\n                domNode.focus();\n            }\n        };\n    }\n}\nfunction ScrollAndFocusHandler(param) {\n    let { segmentPath, children } = param;\n    const context = useContext(GlobalLayoutRouterContext);\n    if (!context) {\n        throw Object.defineProperty(new Error('invariant global layout router not mounted'), \"__NEXT_ERROR_CODE\", {\n            value: \"E473\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return /*#__PURE__*/ _jsx(InnerScrollAndFocusHandler, {\n        segmentPath: segmentPath,\n        focusAndScrollRef: context.focusAndScrollRef,\n        children: children\n    });\n}\n/**\n * InnerLayoutRouter handles rendering the provided segment based on the cache.\n */ function InnerLayoutRouter(param) {\n    let { tree, segmentPath, cacheNode, url } = param;\n    const context = useContext(GlobalLayoutRouterContext);\n    if (!context) {\n        throw Object.defineProperty(new Error('invariant global layout router not mounted'), \"__NEXT_ERROR_CODE\", {\n            value: \"E473\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const { tree: fullTree } = context;\n    // `rsc` represents the renderable node for this segment.\n    // If this segment has a `prefetchRsc`, it's the statically prefetched data.\n    // We should use that on initial render instead of `rsc`. Then we'll switch\n    // to `rsc` when the dynamic response streams in.\n    //\n    // If no prefetch data is available, then we go straight to rendering `rsc`.\n    const resolvedPrefetchRsc = cacheNode.prefetchRsc !== null ? cacheNode.prefetchRsc : cacheNode.rsc;\n    // We use `useDeferredValue` to handle switching between the prefetched and\n    // final values. The second argument is returned on initial render, then it\n    // re-renders with the first argument.\n    const rsc = useDeferredValue(cacheNode.rsc, resolvedPrefetchRsc);\n    // `rsc` is either a React node or a promise for a React node, except we\n    // special case `null` to represent that this segment's data is missing. If\n    // it's a promise, we need to unwrap it so we can determine whether or not the\n    // data is missing.\n    const resolvedRsc = typeof rsc === 'object' && rsc !== null && typeof rsc.then === 'function' ? use(rsc) : rsc;\n    if (!resolvedRsc) {\n        // The data for this segment is not available, and there's no pending\n        // navigation that will be able to fulfill it. We need to fetch more from\n        // the server and patch the cache.\n        // Check if there's already a pending request.\n        let lazyData = cacheNode.lazyData;\n        if (lazyData === null) {\n            /**\n       * Router state with refetch marker added\n       */ // TODO-APP: remove ''\n            const refetchTree = walkAddRefetch([\n                '',\n                ...segmentPath\n            ], fullTree);\n            const includeNextUrl = hasInterceptionRouteInCurrentTree(fullTree);\n            const navigatedAt = Date.now();\n            cacheNode.lazyData = lazyData = fetchServerResponse(new URL(url, location.origin), {\n                flightRouterState: refetchTree,\n                nextUrl: includeNextUrl ? context.nextUrl : null\n            }).then((serverResponse)=>{\n                startTransition(()=>{\n                    dispatchAppRouterAction({\n                        type: ACTION_SERVER_PATCH,\n                        previousTree: fullTree,\n                        serverResponse,\n                        navigatedAt\n                    });\n                });\n                return serverResponse;\n            });\n            // Suspend while waiting for lazyData to resolve\n            use(lazyData);\n        }\n        // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n        // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.\n        use(unresolvedThenable);\n    }\n    // If we get to this point, then we know we have something we can render.\n    const subtree = // The layout router context narrows down tree and childNodes at each level.\n    /*#__PURE__*/ _jsx(LayoutRouterContext.Provider, {\n        value: {\n            parentTree: tree,\n            parentCacheNode: cacheNode,\n            parentSegmentPath: segmentPath,\n            // TODO-APP: overriding of url for parallel routes\n            url: url\n        },\n        children: resolvedRsc\n    });\n    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n    return subtree;\n}\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */ function LoadingBoundary(param) {\n    let { loading, children } = param;\n    // If loading is a promise, unwrap it. This happens in cases where we haven't\n    // yet received the loading data from the server — which includes whether or\n    // not this layout has a loading component at all.\n    //\n    // It's OK to suspend here instead of inside the fallback because this\n    // promise will resolve simultaneously with the data for the segment itself.\n    // So it will never suspend for longer than it would have if we didn't use\n    // a Suspense fallback at all.\n    let loadingModuleData;\n    if (typeof loading === 'object' && loading !== null && typeof loading.then === 'function') {\n        const promiseForLoading = loading;\n        loadingModuleData = use(promiseForLoading);\n    } else {\n        loadingModuleData = loading;\n    }\n    if (loadingModuleData) {\n        const loadingRsc = loadingModuleData[0];\n        const loadingStyles = loadingModuleData[1];\n        const loadingScripts = loadingModuleData[2];\n        return /*#__PURE__*/ _jsx(Suspense, {\n            fallback: /*#__PURE__*/ _jsxs(_Fragment, {\n                children: [\n                    loadingStyles,\n                    loadingScripts,\n                    loadingRsc\n                ]\n            }),\n            children: children\n        });\n    }\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: children\n    });\n}\n/**\n * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.\n * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.\n */ export default function OuterLayoutRouter(param) {\n    let { parallelRouterKey, error, errorStyles, errorScripts, templateStyles, templateScripts, template, notFound, forbidden, unauthorized, segmentViewBoundaries } = param;\n    const context = useContext(LayoutRouterContext);\n    if (!context) {\n        throw Object.defineProperty(new Error('invariant expected layout router to be mounted'), \"__NEXT_ERROR_CODE\", {\n            value: \"E56\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const { parentTree, parentCacheNode, parentSegmentPath, url } = context;\n    // Get the CacheNode for this segment by reading it from the parent segment's\n    // child map.\n    const parentParallelRoutes = parentCacheNode.parallelRoutes;\n    let segmentMap = parentParallelRoutes.get(parallelRouterKey);\n    // If the parallel router cache node does not exist yet, create it.\n    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n    if (!segmentMap) {\n        segmentMap = new Map();\n        parentParallelRoutes.set(parallelRouterKey, segmentMap);\n    }\n    const parentTreeSegment = parentTree[0];\n    const segmentPath = parentSegmentPath === null ? // path. This has led to a bunch of special cases scattered throughout\n    // the code. We should clean this up.\n    [\n        parallelRouterKey\n    ] : parentSegmentPath.concat([\n        parentTreeSegment,\n        parallelRouterKey\n    ]);\n    // The \"state\" key of a segment is the one passed to React — it represents the\n    // identity of the UI tree. Whenever the state key changes, the tree is\n    // recreated and the state is reset. In the App Router model, search params do\n    // not cause state to be lost, so two segments with the same segment path but\n    // different search params should have the same state key.\n    //\n    // The \"cache\" key of a segment, however, *does* include the search params, if\n    // it's possible that the segment accessed the search params on the server.\n    // (This only applies to page segments; layout segments cannot access search\n    // params on the server.)\n    const activeTree = parentTree[1][parallelRouterKey];\n    const activeSegment = activeTree[0];\n    const activeStateKey = createRouterCacheKey(activeSegment, true) // no search params\n    ;\n    // At each level of the route tree, not only do we render the currently\n    // active segment — we also render the last N segments that were active at\n    // this level inside a hidden <Activity> boundary, to preserve their state\n    // if or when the user navigates to them again.\n    //\n    // bfcacheEntry is a linked list of FlightRouterStates.\n    let bfcacheEntry = useRouterBFCache(activeTree, activeStateKey);\n    let children = [];\n    do {\n        const tree = bfcacheEntry.tree;\n        const stateKey = bfcacheEntry.stateKey;\n        const segment = tree[0];\n        const cacheKey = createRouterCacheKey(segment);\n        // Read segment path from the parallel router cache node.\n        let cacheNode = segmentMap.get(cacheKey);\n        if (cacheNode === undefined) {\n            // When data is not available during rendering client-side we need to fetch\n            // it from the server.\n            const newLazyCacheNode = {\n                lazyData: null,\n                rsc: null,\n                prefetchRsc: null,\n                head: null,\n                prefetchHead: null,\n                parallelRoutes: new Map(),\n                loading: null,\n                navigatedAt: -1\n            };\n            // Flight data fetch kicked off during render and put into the cache.\n            cacheNode = newLazyCacheNode;\n            segmentMap.set(cacheKey, newLazyCacheNode);\n        }\n        /*\n    - Error boundary\n      - Only renders error boundary if error component is provided.\n      - Rendered for each segment to ensure they have their own error state.\n      - When gracefully degrade for bots, skip rendering error boundary.\n    - Loading boundary\n      - Only renders suspense boundary if loading components is provided.\n      - Rendered for each segment to ensure they have their own loading state.\n      - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n  */ let segmentBoundaryTriggerNode = null;\n        let segmentViewStateNode = null;\n        if (process.env.NODE_ENV !== 'production' && process.env.__NEXT_DEVTOOL_SEGMENT_EXPLORER) {\n            const { SegmentBoundaryTriggerNode, SegmentViewStateNode } = require('../../next-devtools/userspace/app/segment-explorer-node');\n            const pagePrefix = normalizeAppPath(url);\n            segmentViewStateNode = /*#__PURE__*/ _jsx(SegmentViewStateNode, {\n                page: pagePrefix\n            }, pagePrefix);\n            segmentBoundaryTriggerNode = /*#__PURE__*/ _jsx(_Fragment, {\n                children: /*#__PURE__*/ _jsx(SegmentBoundaryTriggerNode, {})\n            });\n        }\n        // TODO: The loading module data for a segment is stored on the parent, then\n        // applied to each of that parent segment's parallel route slots. In the\n        // simple case where there's only one parallel route (the `children` slot),\n        // this is no different from if the loading module data where stored on the\n        // child directly. But I'm not sure this actually makes sense when there are\n        // multiple parallel routes. It's not a huge issue because you always have\n        // the option to define a narrower loading boundary for a particular slot. But\n        // this sort of smells like an implementation accident to me.\n        const loadingModuleData = parentCacheNode.loading;\n        let child = /*#__PURE__*/ _jsxs(TemplateContext.Provider, {\n            value: /*#__PURE__*/ _jsxs(ScrollAndFocusHandler, {\n                segmentPath: segmentPath,\n                children: [\n                    /*#__PURE__*/ _jsx(ErrorBoundary, {\n                        errorComponent: error,\n                        errorStyles: errorStyles,\n                        errorScripts: errorScripts,\n                        children: /*#__PURE__*/ _jsx(LoadingBoundary, {\n                            loading: loadingModuleData,\n                            children: /*#__PURE__*/ _jsx(HTTPAccessFallbackBoundary, {\n                                notFound: notFound,\n                                forbidden: forbidden,\n                                unauthorized: unauthorized,\n                                children: /*#__PURE__*/ _jsxs(RedirectBoundary, {\n                                    children: [\n                                        /*#__PURE__*/ _jsx(InnerLayoutRouter, {\n                                            url: url,\n                                            tree: tree,\n                                            cacheNode: cacheNode,\n                                            segmentPath: segmentPath\n                                        }),\n                                        segmentBoundaryTriggerNode\n                                    ]\n                                })\n                            })\n                        })\n                    }),\n                    segmentViewStateNode\n                ]\n            }),\n            children: [\n                templateStyles,\n                templateScripts,\n                template\n            ]\n        }, stateKey);\n        if (process.env.NODE_ENV !== 'production') {\n            const { SegmentStateProvider } = require('../../next-devtools/userspace/app/segment-explorer-node');\n            child = /*#__PURE__*/ _jsxs(SegmentStateProvider, {\n                children: [\n                    child,\n                    segmentViewBoundaries\n                ]\n            }, stateKey);\n        }\n        if (process.env.__NEXT_ROUTER_BF_CACHE) {\n            child = /*#__PURE__*/ _jsx(Activity, {\n                mode: stateKey === activeStateKey ? 'visible' : 'hidden',\n                children: child\n            }, stateKey);\n        }\n        children.push(child);\n        bfcacheEntry = bfcacheEntry.next;\n    }while (bfcacheEntry !== null);\n    return children;\n}\n\n//# sourceMappingURL=layout-router.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1879, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/shared/lib/invariant-error.js"],"sourcesContent":["export class InvariantError extends Error {\n    constructor(message, options){\n        super(\"Invariant: \" + (message.endsWith('.') ? message : message + '.') + \" This is a bug in Next.js.\", options);\n        this.name = 'InvariantError';\n    }\n}\n\n//# sourceMappingURL=invariant-error.js.map"],"names":[],"mappings":";;;;AAAO,MAAM,uBAAuB;IAChC,YAAY,OAAO,EAAE,OAAO,CAAC;QACzB,KAAK,CAAC,gBAAgB,CAAC,QAAQ,QAAQ,CAAC,OAAO,UAAU,UAAU,GAAG,IAAI,8BAA8B;QACxG,IAAI,CAAC,IAAI,GAAG;IAChB;AACJ,EAEA,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1893, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/client-page.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { InvariantError } from '../../shared/lib/invariant-error';\n/**\n * When the Page is a client component we send the params and searchParams to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Page component.\n *\n * additionally we may send promises representing the params and searchParams. We don't ever use these passed\n * values but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations.\n * It is up to the caller to decide if the promises are needed.\n */ export function ClientPageRoot(param) {\n    let { Component, searchParams, params, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    promises } = param;\n    if (typeof window === 'undefined') {\n        const { workAsyncStorage } = require('../../server/app-render/work-async-storage.external');\n        let clientSearchParams;\n        let clientParams;\n        // We are going to instrument the searchParams prop with tracking for the\n        // appropriate context. We wrap differently in prerendering vs rendering\n        const store = workAsyncStorage.getStore();\n        if (!store) {\n            throw Object.defineProperty(new InvariantError('Expected workStore to exist when handling searchParams in a client Page.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E564\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const { createSearchParamsFromClient } = require('../../server/request/search-params');\n        clientSearchParams = createSearchParamsFromClient(searchParams, store);\n        const { createParamsFromClient } = require('../../server/request/params');\n        clientParams = createParamsFromClient(params, store);\n        return /*#__PURE__*/ _jsx(Component, {\n            params: clientParams,\n            searchParams: clientSearchParams\n        });\n    } else {\n        const { createRenderSearchParamsFromClient } = require('../request/search-params.browser');\n        const clientSearchParams = createRenderSearchParamsFromClient(searchParams);\n        const { createRenderParamsFromClient } = require('../request/params.browser');\n        const clientParams = createRenderParamsFromClient(params);\n        return /*#__PURE__*/ _jsx(Component, {\n            params: clientParams,\n            searchParams: clientSearchParams\n        });\n    }\n}\n\n//# sourceMappingURL=client-page.js.map"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;AAUW,SAAS,eAAe,KAAK;IACpC,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,EACrC,QAAQ,EAAE,GAAG;IACb,wCAAmC;QAC/B,MAAM,EAAE,gBAAgB,EAAE;;;;;QAC1B,IAAI;QACJ,IAAI;QACJ,yEAAyE;QACzE,wEAAwE;QACxE,MAAM,QAAQ,iBAAiB,QAAQ;QACvC,IAAI,CAAC,OAAO;YACR,MAAM,OAAO,cAAc,CAAC,IAAI,gQAAc,CAAC,6EAA6E,qBAAqB;gBAC7I,OAAO;gBACP,YAAY;gBACZ,cAAc;YAClB;QACJ;QACA,MAAM,EAAE,4BAA4B,EAAE;;;;;QACtC,qBAAqB,6BAA6B,cAAc;QAChE,MAAM,EAAE,sBAAsB,EAAE;;;;;QAChC,eAAe,uBAAuB,QAAQ;QAC9C,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,WAAW;YACjC,QAAQ;YACR,cAAc;QAClB;IACJ;;AAUJ,EAEA,uCAAuC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1945, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/client-segment.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { InvariantError } from '../../shared/lib/invariant-error';\n/**\n * When the Page is a client component we send the params to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Segment component.\n *\n * additionally we may send a promise representing params. We don't ever use this passed\n * value but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations\n * such as when cacheComponents is enabled. It is up to the caller to decide if the promises are needed.\n */ export function ClientSegmentRoot(param) {\n    let { Component, slots, params, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    promise } = param;\n    if (typeof window === 'undefined') {\n        const { workAsyncStorage } = require('../../server/app-render/work-async-storage.external');\n        let clientParams;\n        // We are going to instrument the searchParams prop with tracking for the\n        // appropriate context. We wrap differently in prerendering vs rendering\n        const store = workAsyncStorage.getStore();\n        if (!store) {\n            throw Object.defineProperty(new InvariantError('Expected workStore to exist when handling params in a client segment such as a Layout or Template.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E600\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const { createParamsFromClient } = require('../../server/request/params');\n        clientParams = createParamsFromClient(params, store);\n        return /*#__PURE__*/ _jsx(Component, {\n            ...slots,\n            params: clientParams\n        });\n    } else {\n        const { createRenderParamsFromClient } = require('../request/params.browser');\n        const clientParams = createRenderParamsFromClient(params);\n        return /*#__PURE__*/ _jsx(Component, {\n            ...slots,\n            params: clientParams\n        });\n    }\n}\n\n//# sourceMappingURL=client-segment.js.map"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;AAUW,SAAS,kBAAkB,KAAK;IACvC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAC9B,OAAO,EAAE,GAAG;IACZ,wCAAmC;QAC/B,MAAM,EAAE,gBAAgB,EAAE;;;;;QAC1B,IAAI;QACJ,yEAAyE;QACzE,wEAAwE;QACxE,MAAM,QAAQ,iBAAiB,QAAQ;QACvC,IAAI,CAAC,OAAO;YACR,MAAM,OAAO,cAAc,CAAC,IAAI,gQAAc,CAAC,uGAAuG,qBAAqB;gBACvK,OAAO;gBACP,YAAY;gBACZ,cAAc;YAClB;QACJ;QACA,MAAM,EAAE,sBAAsB,EAAE;;;;;QAChC,eAAe,uBAAuB,QAAQ;QAC9C,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,WAAW;YACjC,GAAG,KAAK;YACR,QAAQ;QACZ;IACJ;;AAQJ,EAEA,0CAA0C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1990, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/lib/metadata/generate/icon-mark.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// This is a client component that only renders during SSR,\n// but will be replaced during streaming with an icon insertion script tag.\n// We don't want it to be presented anywhere so it's only visible during streaming,\n// right after the icon meta tags so that browser can pick it up as soon as it's rendered.\n// Note: we don't just emit the script here because we only need the script if it's not in the head,\n// and we need it to be hoistable alongside the other metadata but sync scripts are not hoistable.\nexport const IconMark = ()=>{\n    if (typeof window !== 'undefined') {\n        return null;\n    }\n    return /*#__PURE__*/ _jsx(\"meta\", {\n        name: \"\\xabnxt-icon\\xbb\"\n    });\n};\n\n//# sourceMappingURL=icon-mark.js.map"],"names":[],"mappings":";;;;AACA;AADA;;AAQO,MAAM,WAAW;IACpB;;IAGA,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,QAAQ;QAC9B,MAAM;IACV;AACJ,GAEA,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2008, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/client/components/metadata/async-metadata.js"],"sourcesContent":["'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Suspense, use } from 'react';\nfunction MetadataOutlet(param) {\n    let { promise } = param;\n    const { error, digest } = use(promise);\n    if (error) {\n        if (digest) {\n            // The error will lose its original digest after passing from server layer to client layer；\n            // We recover the digest property here to override the React created one if original digest exists.\n            ;\n            error.digest = digest;\n        }\n        throw error;\n    }\n    return null;\n}\nexport function AsyncMetadataOutlet(param) {\n    let { promise } = param;\n    return /*#__PURE__*/ _jsx(Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/ _jsx(MetadataOutlet, {\n            promise: promise\n        })\n    });\n}\n\n//# sourceMappingURL=async-metadata.js.map"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;AAGA,SAAS,eAAe,KAAK;IACzB,IAAI,EAAE,OAAO,EAAE,GAAG;IAClB,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAA,oQAAG,EAAC;IAC9B,IAAI,OAAO;QACP,IAAI,QAAQ;YACR,2FAA2F;YAC3F,mGAAmG;;YAEnG,MAAM,MAAM,GAAG;QACnB;QACA,MAAM;IACV;IACA,OAAO;AACX;AACO,SAAS,oBAAoB,KAAK;IACrC,IAAI,EAAE,OAAO,EAAE,GAAG;IAClB,OAAO,WAAW,GAAG,IAAA,sRAAI,EAAC,yQAAQ,EAAE;QAChC,UAAU;QACV,UAAU,WAAW,GAAG,IAAA,sRAAI,EAAC,gBAAgB;YACzC,SAAS;QACb;IACJ;AACJ,EAEA,0CAA0C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2044, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/lib/framework/boundary-constants.js"],"sourcesContent":["export const METADATA_BOUNDARY_NAME = '__next_metadata_boundary__';\nexport const VIEWPORT_BOUNDARY_NAME = '__next_viewport_boundary__';\nexport const OUTLET_BOUNDARY_NAME = '__next_outlet_boundary__';\nexport const ROOT_LAYOUT_BOUNDARY_NAME = '__next_root_layout_boundary__';\n\n//# sourceMappingURL=boundary-constants.js.map"],"names":[],"mappings":";;;;;;;;;;AAAO,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B,iCAEzC,8CAA8C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2062, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/node_modules/next/dist/esm/lib/framework/boundary-components.js"],"sourcesContent":["'use client';\nimport { METADATA_BOUNDARY_NAME, VIEWPORT_BOUNDARY_NAME, OUTLET_BOUNDARY_NAME, ROOT_LAYOUT_BOUNDARY_NAME } from './boundary-constants';\n// We use a namespace object to allow us to recover the name of the function\n// at runtime even when production bundling/minification is used.\nconst NameSpace = {\n    [METADATA_BOUNDARY_NAME]: function({ children }) {\n        return children;\n    },\n    [VIEWPORT_BOUNDARY_NAME]: function({ children }) {\n        return children;\n    },\n    [OUTLET_BOUNDARY_NAME]: function({ children }) {\n        return children;\n    },\n    [ROOT_LAYOUT_BOUNDARY_NAME]: function({ children }) {\n        return children;\n    }\n};\nexport const MetadataBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[METADATA_BOUNDARY_NAME.slice(0)];\nexport const ViewportBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[VIEWPORT_BOUNDARY_NAME.slice(0)];\nexport const OutletBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[OUTLET_BOUNDARY_NAME.slice(0)];\nexport const RootLayoutBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[ROOT_LAYOUT_BOUNDARY_NAME.slice(0)];\n\n//# sourceMappingURL=boundary-components.js.map"],"names":[],"mappings":";;;;;;;;;;AACA;AADA;;AAEA,4EAA4E;AAC5E,iEAAiE;AACjE,MAAM,YAAY;IACd,CAAC,8QAAsB,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;QAC3C,OAAO;IACX;IACA,CAAC,8QAAsB,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;QAC3C,OAAO;IACX;IACA,CAAC,4QAAoB,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;QACzC,OAAO;IACX;IACA,CAAC,iRAAyB,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;QAC9C,OAAO;IACX;AACJ;AACO,MAAM,mBACb,4DAA4D;AAC5D,SAAS,CAAC,8QAAsB,CAAC,KAAK,CAAC,GAAG;AACnC,MAAM,mBACb,4DAA4D;AAC5D,SAAS,CAAC,8QAAsB,CAAC,KAAK,CAAC,GAAG;AACnC,MAAM,iBACb,4DAA4D;AAC5D,SAAS,CAAC,4QAAoB,CAAC,KAAK,CAAC,GAAG;AACjC,MAAM,qBACb,4DAA4D;AAC5D,SAAS,CAAC,iRAAyB,CAAC,KAAK,CAAC,GAAG,EAE7C,+CAA+C","ignoreList":[0],"debugId":null}}]
}