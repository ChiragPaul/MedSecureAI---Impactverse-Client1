{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/components/BrandAnimation.js"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function BrandAnimation({ onClose }) {\r\n  const [show, setShow] = useState(true);\r\n  useEffect(() => {\r\n    if (!show) {\r\n      if (onClose) onClose();\r\n    }\r\n  }, [show, onClose]);\r\n  return show ? (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        background: \"rgba(0,0,0,0.95)\",\r\n        zIndex: 9999,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        animation: \"fadeIn 0.7s\"\r\n      }}\r\n      onClick={() => setShow(false)}\r\n    >\r\n      <h1\r\n        style={{\r\n          fontFamily: 'Arial, Helvetica, sans-serif',\r\n          color: \"#22c55e\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"7vw\",\r\n          textShadow: \"0 0 64px #22c55e, 0 0 32px #001a66\",\r\n          animation: \"zoomInBrand 1.2s cubic-bezier(.4,2,.3,1)\"\r\n        }}\r\n      >\r\n        MedSecure AI\r\n      </h1>\r\n      <style>{`\r\n        @keyframes fadeIn {\r\n          from { opacity: 0; }\r\n          to { opacity: 1; }\r\n        }\r\n        @keyframes zoomInBrand {\r\n          0% { transform: scale(0.1) translateY(100vh); opacity: 0; }\r\n          60% { transform: scale(1.2) translateY(0); opacity: 1; }\r\n          100% { transform: scale(1) translateY(0); opacity: 1; }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  ) : null;\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AADA;;;AAGe,SAAS,eAAe,EAAE,OAAO,EAAE;IAChD,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yQAAQ,EAAC;IACjC,IAAA,0QAAS,EAAC;QACR,IAAI,CAAC,MAAM;YACT,IAAI,SAAS;QACf;IACF,GAAG;QAAC;QAAM;KAAQ;IAClB,OAAO,qBACL,sSAAC;QACC,OAAO;YACL,UAAU;YACV,KAAK;YACL,MAAM;YACN,OAAO;YACP,QAAQ;YACR,YAAY;YACZ,QAAQ;YACR,SAAS;YACT,YAAY;YACZ,gBAAgB;YAChB,WAAW;QACb;QACA,SAAS,IAAM,QAAQ;;0BAEvB,sSAAC;gBACC,OAAO;oBACL,YAAY;oBACZ,OAAO;oBACP,YAAY;oBACZ,UAAU;oBACV,YAAY;oBACZ,WAAW;gBACb;0BACD;;;;;;0BAGD,sSAAC;0BAAO,CAAC;;;;;;;;;;MAUT,CAAC;;;;;;;;;;;eAED;AACN","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/components/Navbar.js"],"sourcesContent":["\"use client\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nimport { useState, useEffect } from \"react\";\nimport BrandAnimation from \"./BrandAnimation\";\n\nimport PropTypes from \"prop-types\";\n\nconst loggedOutLinks = [{ href: \"/\", label: \"Home\" }];\n\nconst loggedInLinks = [\n  { href: \"/ai-chat\", label: \"MedAI\" },\n  { href: \"/meddata\", label: \"MedData\" },\n];\n\nexport default function Navbar({ isLoggedIn }) {\n  const pathname = usePathname();\n  // Sync dark mode with system preference and persist across reloads\n  const [darkMode, setDarkMode] = useState(true);\n  const [showBrandAnim, setShowBrandAnim] = useState(false);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      document.body.classList.remove(\"light\");\n      document.body.classList.add(\"dark\");\n      localStorage.setItem(\"theme-dark\", \"true\");\n    }\n  }, []);\n\n  const links = isLoggedIn ? loggedInLinks : loggedOutLinks;\n\n  return (\n    <>\n      {showBrandAnim && (\n        <BrandAnimation onClose={() => setShowBrandAnim(false)} />\n      )}\n      <nav className=\"bg-night border-b border-brand/20 px-6 py-4 flex justify-between items-center\">\n        {/* Logo */}\n        <h1\n          className=\"text-2xl font-bold text-brand\"\n          style={{\n            fontFamily: \"Arial, Helvetica, sans-serif\",\n            cursor: \"pointer\",\n          }}\n          onDoubleClick={() => setShowBrandAnim(true)}\n        >\n          MedSecure AI\n        </h1>\n        {/* Links in black box with semi-circular sides */}\n        <div className=\"flex items-center\">\n          <div\n            className=\"bg-black rounded-full px-8 py-2 flex space-x-8 shadow-md\"\n            style={{ fontFamily: \"Arial, Helvetica, sans-serif\" }}\n          >\n            {links.map((link, idx) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className={`font-bold text-lg flex items-center gap-2 transition navbar-feature-link ${\n                  pathname === link.href\n                    ? \"text-brand border-b-2 border-brand\"\n                    : \"text-gray-100 hover:text-brand\"\n                } pb-1`}\n                style={{ fontFamily: \"Arial, Helvetica, sans-serif\" }}\n              >\n                {/* SVG logo before each link */}\n                {idx === 0 && (\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M3 10L10 4L17 10\"\n                      stroke=\"#00ff88\"\n                      strokeWidth=\"2\"\n                      fill=\"none\"\n                    />\n                    <rect x=\"6\" y=\"10\" width=\"8\" height=\"6\" fill=\"#00ff88\" />\n                  </svg>\n                )}\n                {idx === 1 && isLoggedIn && (\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <rect\n                      x=\"4\"\n                      y=\"4\"\n                      width=\"12\"\n                      height=\"12\"\n                      rx=\"3\"\n                      fill=\"#001a66\"\n                    />\n                  </svg>\n                )}\n                {idx === 2 && isLoggedIn && (\n                  <svg\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <polygon points=\"10,3 17,17 3,17\" fill=\"#ededed\" />\n                  </svg>\n                )}\n                {link.label}\n              </Link>\n            ))}\n          </div>\n          {/* Theme fixed to dark; toggle removed */}\n        </div>\n\n        {/* Login Button */}\n        {!isLoggedIn && (\n          <Link href=\"/login\">\n            <button\n              className=\"px-4 py-2 bg-brand hover:bg-brand-dark rounded-xl shadow-glow transition\"\n              style={{ fontFamily: \"Arial, Helvetica, sans-serif\" }}\n            >\n              Login\n            </button>\n          </Link>\n        )}\n      </nav>\n    </>\n  );\n}\n\nNavbar.propTypes = {\n  isLoggedIn: PropTypes.bool,\n};\n\nNavbar.defaultProps = {\n  isLoggedIn: false,\n};\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;AACA;AAEA;AAPA;;;;;;;AASA,MAAM,iBAAiB;IAAC;QAAE,MAAM;QAAK,OAAO;IAAO;CAAE;AAErD,MAAM,gBAAgB;IACpB;QAAE,MAAM;QAAY,OAAO;IAAQ;IACnC;QAAE,MAAM;QAAY,OAAO;IAAU;CACtC;AAEc,SAAS,OAAO,EAAE,UAAU,EAAE;IAC3C,MAAM,WAAW,IAAA,yMAAW;IAC5B,mEAAmE;IACnE,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yQAAQ,EAAC;IACzC,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yQAAQ,EAAC;IAEnD,IAAA,0QAAS,EAAC;QACR;;IAKF,GAAG,EAAE;IAEL,MAAM,QAAQ,aAAa,gBAAgB;IAE3C,qBACE;;YACG,+BACC,sSAAC,2MAAc;gBAAC,SAAS,IAAM,iBAAiB;;;;;;0BAElD,sSAAC;gBAAI,WAAU;;kCAEb,sSAAC;wBACC,WAAU;wBACV,OAAO;4BACL,YAAY;4BACZ,QAAQ;wBACV;wBACA,eAAe,IAAM,iBAAiB;kCACvC;;;;;;kCAID,sSAAC;wBAAI,WAAU;kCACb,cAAA,sSAAC;4BACC,WAAU;4BACV,OAAO;gCAAE,YAAY;4BAA+B;sCAEnD,MAAM,GAAG,CAAC,CAAC,MAAM,oBAChB,sSAAC,+NAAI;oCAEH,MAAM,KAAK,IAAI;oCACf,WAAW,CAAC,yEAAyE,EACnF,aAAa,KAAK,IAAI,GAClB,uCACA,iCACL,KAAK,CAAC;oCACP,OAAO;wCAAE,YAAY;oCAA+B;;wCAGnD,QAAQ,mBACP,sSAAC;4CACC,OAAM;4CACN,QAAO;4CACP,SAAQ;4CACR,MAAK;4CACL,OAAM;;8DAEN,sSAAC;oDACC,GAAE;oDACF,QAAO;oDACP,aAAY;oDACZ,MAAK;;;;;;8DAEP,sSAAC;oDAAK,GAAE;oDAAI,GAAE;oDAAK,OAAM;oDAAI,QAAO;oDAAI,MAAK;;;;;;;;;;;;wCAGhD,QAAQ,KAAK,4BACZ,sSAAC;4CACC,OAAM;4CACN,QAAO;4CACP,SAAQ;4CACR,MAAK;4CACL,OAAM;sDAEN,cAAA,sSAAC;gDACC,GAAE;gDACF,GAAE;gDACF,OAAM;gDACN,QAAO;gDACP,IAAG;gDACH,MAAK;;;;;;;;;;;wCAIV,QAAQ,KAAK,4BACZ,sSAAC;4CACC,OAAM;4CACN,QAAO;4CACP,SAAQ;4CACR,MAAK;4CACL,OAAM;sDAEN,cAAA,sSAAC;gDAAQ,QAAO;gDAAkB,MAAK;;;;;;;;;;;wCAG1C,KAAK,KAAK;;mCAxDN,KAAK,IAAI;;;;;;;;;;;;;;;oBAgErB,CAAC,4BACA,sSAAC,+NAAI;wBAAC,MAAK;kCACT,cAAA,sSAAC;4BACC,WAAU;4BACV,OAAO;gCAAE,YAAY;4BAA+B;sCACrD;;;;;;;;;;;;;;;;;;;AAQb;AAEA,OAAO,SAAS,GAAG;IACjB,YAAY,yMAAS,CAAC,IAAI;AAC5B;AAEA,OAAO,YAAY,GAAG;IACpB,YAAY;AACd","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/CHIRAG%20PAUL/Desktop/MedSecureAI---Impactverse-Client1/frontend/app/ai-chat/page.js"],"sourcesContent":["\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Navbar from \"../../components/Navbar\";\n\nexport default function AIChat() {\n  const REGIONS = [\n    \"Delhi NCR\",\n    \"Mumbai\",\n    \"Bangalore\",\n    \"Chennai\",\n    \"Hyderabad\",\n    \"Pune\",\n    \"Kolkata\",\n    \"Ahmedabad\",\n    \"Jaipur\",\n  ];\n\n  // State management\n  const [region, setRegion] = useState(REGIONS[0]);\n  const [stockQty, setStockQty] = useState(0);\n  const [medicineName, setMedicineName] = useState(\"\");\n  const [preferredStockist, setPreferredStockist] = useState(0);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedMedicine, setSelectedMedicine] = useState(\"\");\n  const [selectedStockist, setSelectedStockist] = useState(\"\");\n  const [medicineMatches, setMedicineMatches] = useState([]);\n  const [showOrderPopup, setShowOrderPopup] = useState(false);\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [sessionId] = useState(() => Date.now().toString());\n\n  // Conversation flow state\n  const [conversationState, setConversationState] = useState(\"welcome\"); // welcome, greeting, features, medicine_search, region_selection, stockist_search, order_flow\n  const [pendingMedicine, setPendingMedicine] = useState(\"\");\n  const [pendingRegion, setPendingRegion] = useState(\"\");\n\n  const chatEndRef = useRef(null);\n  const [apiBaseUrl, setApiBaseUrl] = useState(\n    \"https://medsecureai-impactverse-client1.onrender.com\"\n  );\n\n  // API functions\n  const sendMessage = async (message) => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${apiBaseUrl}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: message,\n          timestamp: new Date().toISOString(),\n          user: \"user\",\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to send message\");\n      const data = await response.json();\n\n      // Add both user and AI messages to chat history\n      setChatHistory((prev) => [\n        ...prev,\n        { user: \"user\", message: message, timestamp: new Date().toISOString() },\n        {\n          user: \"ai\",\n          message: data.message,\n          timestamp: data.timestamp,\n          data: data.data,\n        },\n      ]);\n\n      return data;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setChatHistory((prev) => [\n        ...prev,\n        { user: \"user\", message: message, timestamp: new Date().toISOString() },\n        {\n          user: \"ai\",\n          message: \"Sorry, I encountered an error. Please try again.\",\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const searchMedicine = async (medicineName, region) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/medicine/search`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          region: region,\n        }),\n        timeout: 30000, // 30 second timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMedicineMatches(data.matches);\n      return data;\n    } catch (error) {\n      console.error(\"Error searching medicine:\", error);\n      // Show error message to user\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't search for medicines right now. Error: ${error.message}. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n      return null;\n    }\n  };\n\n  const predictAvailability = async (\n    medicineName,\n    region,\n    selectedMedicine,\n    selectedStockist\n  ) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/medicine/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          region: region,\n          selected_medicine: selectedMedicine,\n          selected_stockist: selectedStockist,\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to predict availability\");\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error predicting availability:\", error);\n      return null;\n    }\n  };\n\n  const placeOrder = async (\n    medicineName,\n    quantity,\n    region,\n    stockist,\n    preferredStockistId\n  ) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/order`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          quantity: quantity,\n          region: region,\n          stockist: stockist,\n          preferred_stockist_id: preferredStockistId,\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to place order\");\n      const data = await response.json();\n      setOrderDetails(data);\n      setShowOrderPopup(true);\n      return data;\n    } catch (error) {\n      console.error(\"Error placing order:\", error);\n      return null;\n    }\n  };\n\n  // Structured conversation handler\n  const handleStructuredConversation = async (message) => {\n    const lowerMessage = message.toLowerCase().trim();\n\n    // Add user message to chat\n    setChatHistory((prev) => [\n      ...prev,\n      {\n        user: \"user\",\n        message: message,\n        timestamp: new Date().toISOString(),\n      },\n    ]);\n\n    switch (conversationState) {\n      case \"welcome\":\n        if (\n          lowerMessage.includes(\"hi\") ||\n          lowerMessage.includes(\"hello\") ||\n          lowerMessage.includes(\"hey\")\n        ) {\n          setConversationState(\"greeting\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message: `Hello! I m your AI assistant for medicine availability. I can help you with:\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines\\n❓ Answer questions about our services\\n\\nWhat would you like to do?`,\n              timestamp: new Date().toISOString(),\n              type: \"features\",\n            },\n          ]);\n        } else {\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"Hello! Please say 'hi' or 'hello' to start our conversation.\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        }\n        break;\n\n      case \"greeting\":\n      case \"features\":\n        if (\n          lowerMessage.includes(\"check\") &&\n          lowerMessage.includes(\"availability\")\n        ) {\n          setConversationState(\"medicine_search\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"Great! I ll help you check medicine availability. What s the name of the medicine you re looking for?\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        } else if (\n          lowerMessage.includes(\"stockist\") ||\n          lowerMessage.includes(\"stockists\")\n        ) {\n          setConversationState(\"region_selection\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I ll help you find stockists. Which region are you looking in? Please select from the dropdown or type the region name.\",\n              timestamp: new Date().toISOString(),\n              type: \"region_selection\",\n            },\n          ]);\n        } else if (\n          lowerMessage.includes(\"order\") ||\n          lowerMessage.includes(\"place\")\n        ) {\n          setConversationState(\"order_flow\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I ll help you place an order. What medicine would you like to order?\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        } else {\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I can help you with:\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines\\n\\nWhat would you like to do?\",\n              timestamp: new Date().toISOString(),\n              type: \"features\",\n            },\n          ]);\n        }\n        break;\n\n      case \"medicine_search\":\n        setPendingMedicine(message);\n        setConversationState(\"region_selection\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Got it! You re looking for \"${message}\". Now, which region would you like to check? Please select from the dropdown or type the region name.`,\n            timestamp: new Date().toISOString(),\n            type: \"region_selection\",\n          },\n        ]);\n        break;\n\n      case \"region_selection\":\n        setPendingRegion(message);\n        if (conversationState === \"medicine_search\" || pendingMedicine) {\n          // Check medicine availability\n          const medicine = pendingMedicine || message;\n          const region = message;\n          await checkMedicineAvailability(medicine, region);\n        } else {\n          // Show stockists in region\n          await showStockistsInRegion(message);\n        }\n        break;\n\n      case \"order_flow\":\n        setPendingMedicine(message);\n        setConversationState(\"order_region\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Great! You want to order \"${message}\". Which region should I check for availability?`,\n            timestamp: new Date().toISOString(),\n            type: \"region_selection\",\n          },\n        ]);\n        break;\n\n      case \"order_region\":\n        setPendingRegion(message);\n        await showOrderOptions(pendingMedicine, message);\n        break;\n\n      default:\n        await sendMessage(message);\n    }\n  };\n\n  // Event handlers\n  const handleSendMessage = async () => {\n    if (!currentMessage.trim()) return;\n\n    const message = currentMessage.trim();\n    setCurrentMessage(\"\");\n\n    await handleStructuredConversation(message);\n  };\n\n  const handleMedicineSelect = async (medicine, stockist) => {\n    setSelectedMedicine(medicine);\n    setSelectedStockist(stockist);\n    setMedicineName(medicine);\n\n    // Predict availability\n    const prediction = await predictAvailability(\n      medicine,\n      region,\n      medicine,\n      stockist\n    );\n    if (prediction) {\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Selected: ${medicine}\\nStockist: ${stockist}\\n\\nPrediction Results:\\nStatus: ${\n            prediction.status\n          }\\nConfidence: ${prediction.confidence_band}\\nProbability: ${(\n            prediction.probability * 100\n          ).toFixed(1)}%\\n${\n            prediction.advice ? `\\nAdvice: ${prediction.advice}` : \"\"\n          }`,\n          timestamp: new Date().toISOString(),\n          type: \"prediction_result\",\n          prediction: prediction,\n        },\n      ]);\n    }\n\n    setMedicineMatches([]);\n  };\n\n  // Helper functions for structured conversation\n  const checkMedicineAvailability = async (medicine, region) => {\n    try {\n      const searchResult = await searchMedicine(medicine, region);\n      if (searchResult && searchResult.matches.length > 0) {\n        setMedicineMatches(searchResult.matches);\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `I found ${searchResult.matches.length} medicine matches for \"${medicine}\" in ${region}. Please select one from the list below:`,\n            timestamp: new Date().toISOString(),\n            type: \"medicine_selection\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn't find any matches for \"${medicine}\" in ${region}. Please try a different medicine or region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't search for medicines right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const showStockistsInRegion = async (region) => {\n    try {\n      // Get all stockists for the region\n      const searchResult = await searchMedicine(\"\", region); // Empty search to get stockists\n      if (searchResult && searchResult.matches.length > 0) {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Here are the stockists available in ${region}:`,\n            timestamp: new Date().toISOString(),\n            type: \"stockist_list\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn t find any stockists in ${region}. Please try a different region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn t get stockist information right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const showOrderOptions = async (medicine, region) => {\n    try {\n      const searchResult = await searchMedicine(medicine, region);\n      if (searchResult && searchResult.matches.length > 0) {\n        setMedicineMatches(searchResult.matches);\n        setSelectedMedicine(medicine);\n        setRegion(region);\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Great! I found ${searchResult.matches.length} options for \"${medicine}\" in ${region}. Please select one and use the order form below to place your order.`,\n            timestamp: new Date().toISOString(),\n            type: \"order_options\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn t find \"${medicine}\" in ${region}. Please try a different medicine or region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't process your order request right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const handlePlaceOrder = async () => {\n    if (!selectedMedicine || stockQty <= 0) {\n      alert(\"Please select a medicine and enter a valid quantity\");\n      return;\n    }\n\n    const order = await placeOrder(\n      selectedMedicine,\n      stockQty,\n      region,\n      selectedStockist,\n      0\n    );\n    if (order) {\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"user\",\n          message: `Place order for ${selectedMedicine} (Qty: ${stockQty})`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `Order placed successfully!\\nOrder ID: ${order.order_id}\\nMedicine: ${selectedMedicine}\\nQuantity: ${stockQty}\\nRegion: ${region}\\nStockist: ${selectedStockist}`,\n          timestamp: new Date().toISOString(),\n          type: \"order_confirmation\",\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Auto-scroll to bottom of chat\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatHistory]);\n\n  // Load chat history from localStorage on component mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem(\"chatHistory\");\n    if (savedHistory) {\n      try {\n        const parsedHistory = JSON.parse(savedHistory);\n        setChatHistory(parsedHistory);\n      } catch (error) {\n        console.error(\"Error loading chat history:\", error);\n      }\n    } else {\n      // Initialize with welcome message if no saved history\n      setChatHistory([\n        {\n          user: \"ai\",\n          message:\n            '👋 Welcome! I m your AI assistant for medicine availability.\\n\\nPlease say \"hi\" or \"hello\" to start our conversation!',\n          timestamp: new Date().toISOString(),\n          type: \"welcome\",\n        },\n      ]);\n    }\n  }, []);\n\n  // Save chat history to localStorage whenever it changes\n  useEffect(() => {\n    if (chatHistory.length > 0) {\n      localStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n    }\n  }, [chatHistory]);\n\n  return (\n    <div\n      className=\"min-h-screen bg-night text-white flex flex-col\"\n      style={{\n        fontFamily: \"Arial, Helvetica, sans-serif\",\n        background: \"var(--background)\",\n      }}\n    >\n      <Navbar isLoggedIn={true} />\n\n      {/* 1st VH: About AI Chat */}\n      <section\n        className=\"px-6 md:px-12 flex items-center justify-center relative overflow-hidden\"\n        style={{ minHeight: \"100vh\" }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-brand/5 via-transparent to-brand/10\"></div>\n        <div className=\"w-full max-w-5xl text-center slide-in relative z-10\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-white via-brand to-brand/80 bg-clip-text text-transparent\">\n            About AI Chat\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed mb-8\">\n            A simple, reliable assistant to answer health logistics questions,\n            summarize records, and guide ordering. Scroll down to chat and use\n            quick controls.\n          </p>\n          <div className=\"flex justify-center gap-4\">\n            <div className=\"bg-black/40 backdrop-blur-sm border border-brand/20 rounded-xl p-4\">\n              <h4 className=\"text-brand font-bold mb-2\">Smart Responses</h4>\n              <p className=\"text-sm text-gray-300\">\n                AI-powered health logistics\n              </p>\n            </div>\n            <div className=\"bg-black/40 backdrop-blur-sm border border-brand/20 rounded-xl p-4\">\n              <h4 className=\"text-brand font-bold mb-2\">Quick Actions</h4>\n              <p className=\"text-sm text-gray-300\">\n                Streamlined ordering process\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* 2nd VH: Chat layout */}\n      <section className=\"px-6 md:px-12\" style={{ minHeight: \"100vh\" }}>\n        <div className=\"w-full max-w-6xl mx-auto grid grid-cols-12 gap-6\">\n          {/* Left rail: Chat History */}\n          <aside className=\"col-span-12 md:col-span-3\">\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-2xl shadow-2xl shadow-brand/10 p-6 h-full\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-bold text-brand\">Chat History</h3>\n                <button\n                  onClick={() => {\n                    setChatHistory([\n                      {\n                        user: \"ai\",\n                        message:\n                          '👋 Welcome! I\\'m your AI assistant for medicine availability.\\n\\nPlease say \"hi\" or \"hello\" to start our conversation!',\n                        timestamp: new Date().toISOString(),\n                        type: \"welcome\",\n                      },\n                    ]);\n                    localStorage.removeItem(\"chatHistory\");\n                  }}\n                  className=\"text-xs text-gray-400 hover:text-white px-2 py-1 rounded bg-gray-700 hover:bg-gray-600 transition-colors\"\n                >\n                  Clear\n                </button>\n              </div>\n              <div className=\"h-[50vh] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-brand/30 scrollbar-track-transparent\">\n                <div className=\"space-y-3\">\n                  {chatHistory.map((msg, i) => (\n                    <div\n                      key={i}\n                      className=\"bg-black/40 border border-brand/20 rounded-lg p-3 hover:bg-black/60 transition-colors\"\n                    >\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-brand font-semibold text-sm\">\n                          {msg.user === \"user\" ? \"You\" : \"AI\"}\n                        </span>\n                        <span className=\"text-xs text-gray-400\">\n                          {new Date(msg.timestamp).toLocaleTimeString([], {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-300 text-sm whitespace-pre-line\">\n                        {msg.message}\n                      </p>\n                      {msg.type === \"medicine_selection\" && msg.matches && (\n                        <div className=\"mt-2 space-y-1\">\n                          {msg.matches.slice(0, 3).map((match, idx) => (\n                            <button\n                              key={idx}\n                              onClick={() =>\n                                handleMedicineSelect(\n                                  match.medicine,\n                                  match.stockist\n                                )\n                              }\n                              className=\"w-full text-left bg-brand/20 hover:bg-brand/30 rounded p-2 text-xs transition-colors\"\n                            >\n                              <div className=\"font-semibold\">\n                                {match.medicine}\n                              </div>\n                              <div className=\"text-gray-400\">\n                                Stockist: {match.stockist}\n                              </div>\n                              <div className=\"text-brand\">\n                                Score: {(match.score * 100).toFixed(1)}%\n                              </div>\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  {isLoading && (\n                    <div className=\"bg-black/40 border border-brand/20 rounded-lg p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand\"></div>\n                        <span className=\"text-gray-300 text-sm\">\n                          AI is thinking...\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                  <div ref={chatEndRef} />\n                </div>\n              </div>\n            </div>\n          </aside>\n\n          {/* Main Chat box */}\n          <div className=\"col-span-12 md:col-span-9 flex flex-col\">\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-2xl shadow-2xl shadow-brand/10 p-6 flex-1 min-h-[50vh] mb-6\">\n              <div className=\"h-full overflow-y-auto scrollbar-thin scrollbar-thumb-brand/30 scrollbar-track-transparent\">\n                {chatHistory.length === 0 ? (\n                  <div className=\"text-gray-400 text-center py-8\">\n                    <div className=\"text-4xl mb-4\">💬</div>\n                    <p>No messages yet. Start the conversation!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {chatHistory.map((msg, i) => (\n                      <div\n                        key={i}\n                        className={`flex ${\n                          msg.user === \"user\" ? \"justify-end\" : \"justify-start\"\n                        }`}\n                      >\n                        <div\n                          className={`max-w-[80%] rounded-lg p-4 ${\n                            msg.user === \"user\"\n                              ? \"bg-brand text-white\"\n                              : \"bg-gray-700 text-gray-100\"\n                          }`}\n                        >\n                          <div className=\"whitespace-pre-line\">\n                            {msg.message}\n                          </div>\n                          {msg.type === \"medicine_selection\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Select a medicine:\n                              </p>\n                              {msg.matches.slice(0, 5).map((match, idx) => (\n                                <button\n                                  key={idx}\n                                  onClick={() =>\n                                    handleMedicineSelect(\n                                      match.medicine,\n                                      match.stockist\n                                    )\n                                  }\n                                  className=\"w-full text-left bg-white/10 hover:bg-white/20 rounded p-3 text-sm transition-colors\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.medicine}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Stockist: {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs text-brand\">\n                                    Match: {(match.score * 100).toFixed(1)}%\n                                  </div>\n                                </button>\n                              ))}\n                            </div>\n                          )}\n                          {msg.type === \"order_options\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Available options:\n                              </p>\n                              {msg.matches.slice(0, 3).map((match, idx) => (\n                                <button\n                                  key={idx}\n                                  onClick={() =>\n                                    handleMedicineSelect(\n                                      match.medicine,\n                                      match.stockist\n                                    )\n                                  }\n                                  className=\"w-full text-left bg-white/10 hover:bg-white/20 rounded p-3 text-sm transition-colors\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.medicine}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Stockist: {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs text-brand\">\n                                    Match: {(match.score * 100).toFixed(1)}%\n                                  </div>\n                                </button>\n                              ))}\n                            </div>\n                          )}\n                          {msg.type === \"region_selection\" && (\n                            <div className=\"mt-3 p-3 bg-blue-500/20 rounded-lg\">\n                              <p className=\"text-sm font-semibold mb-2\">\n                                Available Regions:\n                              </p>\n                              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                {REGIONS.map((reg) => (\n                                  <button\n                                    key={reg}\n                                    onClick={() => {\n                                      setCurrentMessage(reg);\n                                      handleSendMessage();\n                                    }}\n                                    className=\"text-left p-2 bg-white/10 hover:bg-white/20 rounded transition-colors\"\n                                  >\n                                    {reg}\n                                  </button>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          {msg.type === \"stockist_list\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Available Stockists:\n                              </p>\n                              {msg.matches.map((match, idx) => (\n                                <div\n                                  key={idx}\n                                  className=\"w-full text-left bg-white/10 rounded p-3 text-sm\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Region: {match.region || \"Available\"}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    {isLoading && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"bg-gray-700 rounded-lg p-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand\"></div>\n                            <span>AI is thinking...</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div ref={chatEndRef} />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Input bar */}\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-xl p-4 flex items-center gap-3 mb-6\">\n              <input\n                type=\"text\"\n                value={currentMessage}\n                onChange={(e) => setCurrentMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message...\"\n                className=\"flex-1 bg-night text-white px-4 py-3 rounded-lg border border-brand/20 focus:outline-none focus:border-brand transition-colors\"\n                disabled={isLoading}\n              />\n              <button\n                onClick={handleSendMessage}\n                disabled={isLoading || !currentMessage.trim()}\n                className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-lg font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? \"...\" : \"Send\"}\n              </button>\n            </div>\n\n            {/* Controls row */}\n            <div className=\"grid grid-cols-12 gap-4 items-start\">\n              <div className=\"col-span-12 md:col-span-8 flex gap-3\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  value={stockQty}\n                  onChange={(e) =>\n                    setStockQty(parseInt(e.target.value || \"0\", 10))\n                  }\n                  placeholder=\"Stocks (qty)\"\n                  className=\"radiant-input px-4 py-3 rounded-xl w-40\"\n                />\n                <input\n                  type=\"text\"\n                  value={medicineName}\n                  onChange={(e) => setMedicineName(e.target.value)}\n                  placeholder=\"Medicine name\"\n                  className=\"radiant-input px-4 py-3 rounded-xl flex-1\"\n                />\n                <button\n                  onClick={handlePlaceOrder}\n                  className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-xl font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300 transform hover:scale-105\"\n                >\n                  Place order\n                </button>\n              </div>\n              <div className=\"col-span-12 md:col-span-4\">\n                <label className=\"block text-sm text-gray-400 mb-2\">\n                  Region\n                </label>\n                <select\n                  className=\"w-full radiant-input px-4 py-3 rounded-xl\"\n                  value={region}\n                  onChange={(e) => setRegion(e.target.value)}\n                >\n                  {REGIONS.map((r) => (\n                    <option key={r} value={r}>\n                      {r}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Order Confirmation Popup */}\n      {showOrderPopup && orderDetails && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-night border border-brand/30 rounded-2xl p-8 max-w-md w-full mx-4\">\n            <div className=\"text-center\">\n              <div className=\"text-6xl mb-4\">✅</div>\n              <h3 className=\"text-2xl font-bold text-brand mb-4\">\n                Order Received!\n              </h3>\n              <div className=\"text-gray-300 space-y-2 mb-6\">\n                <p>\n                  <span className=\"font-semibold\">Order ID:</span>{\" \"}\n                  {orderDetails.order_id}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Medicine:</span>{\" \"}\n                  {orderDetails.details.medicine_name}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Quantity:</span>{\" \"}\n                  {orderDetails.details.quantity}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Region:</span>{\" \"}\n                  {orderDetails.details.region}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Stockist:</span>{\" \"}\n                  {orderDetails.details.stockist}\n                </p>\n              </div>\n              <p className=\"text-gray-400 text-sm mb-6\">\n                We'll process your order shortly and send you updates.\n              </p>\n              <button\n                onClick={() => {\n                  setShowOrderPopup(false);\n                  setOrderDetails(null);\n                }}\n                className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-lg font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <footer className=\"mt-auto bg-night border-t border-brand/20 py-6 text-center text-gray-400\">\n        © {new Date().getFullYear()} MedSecure AI. All rights reserved.\n      </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}