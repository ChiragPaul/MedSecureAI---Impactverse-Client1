{"version":3,"sources":["turbopack:///[project]/Desktop/MedSecureAI---Impactverse-Client1/frontend/app/ai-chat/page.js"],"sourcesContent":["\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Navbar from \"../../components/Navbar\";\n\nexport default function AIChat() {\n  const REGIONS = [\n    \"Delhi NCR\",\n    \"Mumbai\",\n    \"Bangalore\",\n    \"Chennai\",\n    \"Hyderabad\",\n    \"Pune\",\n    \"Kolkata\",\n    \"Ahmedabad\",\n    \"Jaipur\",\n  ];\n\n  // State management\n  const [region, setRegion] = useState(REGIONS[0]);\n  const [stockQty, setStockQty] = useState(0);\n  const [medicineName, setMedicineName] = useState(\"\");\n  const [preferredStockist, setPreferredStockist] = useState(0);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [chatHistory, setChatHistory] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedMedicine, setSelectedMedicine] = useState(\"\");\n  const [selectedStockist, setSelectedStockist] = useState(\"\");\n  const [medicineMatches, setMedicineMatches] = useState([]);\n  const [showOrderPopup, setShowOrderPopup] = useState(false);\n  const [orderDetails, setOrderDetails] = useState(null);\n  const [sessionId] = useState(() => Date.now().toString());\n\n  // Conversation flow state\n  const [conversationState, setConversationState] = useState(\"welcome\"); // welcome, greeting, features, medicine_search, region_selection, stockist_search, order_flow\n  const [pendingMedicine, setPendingMedicine] = useState(\"\");\n  const [pendingRegion, setPendingRegion] = useState(\"\");\n\n  const chatEndRef = useRef(null);\n  const [apiBaseUrl, setApiBaseUrl] = useState(\n    \"https://medsecureai-impactverse-client1.onrender.com\"\n  );\n\n  // API functions\n  const sendMessage = async (message) => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${apiBaseUrl}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: message,\n          timestamp: new Date().toISOString(),\n          user: \"user\",\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to send message\");\n      const data = await response.json();\n\n      // Add both user and AI messages to chat history\n      setChatHistory((prev) => [\n        ...prev,\n        { user: \"user\", message: message, timestamp: new Date().toISOString() },\n        {\n          user: \"ai\",\n          message: data.message,\n          timestamp: data.timestamp,\n          data: data.data,\n        },\n      ]);\n\n      return data;\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setChatHistory((prev) => [\n        ...prev,\n        { user: \"user\", message: message, timestamp: new Date().toISOString() },\n        {\n          user: \"ai\",\n          message: \"Sorry, I encountered an error. Please try again.\",\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const searchMedicine = async (medicineName, region) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/medicine/search`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          region: region,\n        }),\n        timeout: 30000, // 30 second timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMedicineMatches(data.matches);\n      return data;\n    } catch (error) {\n      console.error(\"Error searching medicine:\", error);\n      // Show error message to user\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't search for medicines right now. Error: ${error.message}. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n      return null;\n    }\n  };\n\n  const predictAvailability = async (\n    medicineName,\n    region,\n    selectedMedicine,\n    selectedStockist\n  ) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/medicine/predict`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          region: region,\n          selected_medicine: selectedMedicine,\n          selected_stockist: selectedStockist,\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to predict availability\");\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error predicting availability:\", error);\n      return null;\n    }\n  };\n\n  const placeOrder = async (\n    medicineName,\n    quantity,\n    region,\n    stockist,\n    preferredStockistId\n  ) => {\n    try {\n      const response = await fetch(`${apiBaseUrl}/order`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          medicine_name: medicineName,\n          quantity: quantity,\n          region: region,\n          stockist: stockist,\n          preferred_stockist_id: preferredStockistId,\n        }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to place order\");\n      const data = await response.json();\n      setOrderDetails(data);\n      setShowOrderPopup(true);\n      return data;\n    } catch (error) {\n      console.error(\"Error placing order:\", error);\n      return null;\n    }\n  };\n\n  // Structured conversation handler\n  const handleStructuredConversation = async (message) => {\n    const lowerMessage = message.toLowerCase().trim();\n\n    // Add user message to chat\n    setChatHistory((prev) => [\n      ...prev,\n      {\n        user: \"user\",\n        message: message,\n        timestamp: new Date().toISOString(),\n      },\n    ]);\n\n    switch (conversationState) {\n      case \"welcome\":\n        if (\n          lowerMessage.includes(\"hi\") ||\n          lowerMessage.includes(\"hello\") ||\n          lowerMessage.includes(\"hey\")\n        ) {\n          setConversationState(\"greeting\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message: `Hello! I m your AI assistant for medicine availability. I can help you with:\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines\\n❓ Answer questions about our services\\n\\nWhat would you like to do?`,\n              timestamp: new Date().toISOString(),\n              type: \"features\",\n            },\n          ]);\n        } else {\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"Hello! Please say 'hi' or 'hello' to start our conversation.\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        }\n        break;\n\n      case \"greeting\":\n      case \"features\":\n        if (\n          lowerMessage.includes(\"check\") &&\n          lowerMessage.includes(\"availability\")\n        ) {\n          setConversationState(\"medicine_search\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"Great! I ll help you check medicine availability. What s the name of the medicine you re looking for?\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        } else if (\n          lowerMessage.includes(\"stockist\") ||\n          lowerMessage.includes(\"stockists\")\n        ) {\n          setConversationState(\"region_selection\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I ll help you find stockists. Which region are you looking in? Please select from the dropdown or type the region name.\",\n              timestamp: new Date().toISOString(),\n              type: \"region_selection\",\n            },\n          ]);\n        } else if (\n          lowerMessage.includes(\"order\") ||\n          lowerMessage.includes(\"place\")\n        ) {\n          setConversationState(\"order_flow\");\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I ll help you place an order. What medicine would you like to order?\",\n              timestamp: new Date().toISOString(),\n            },\n          ]);\n        } else {\n          setChatHistory((prev) => [\n            ...prev,\n            {\n              user: \"ai\",\n              message:\n                \"I can help you with:\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines\\n\\nWhat would you like to do?\",\n              timestamp: new Date().toISOString(),\n              type: \"features\",\n            },\n          ]);\n        }\n        break;\n\n      case \"medicine_search\":\n        setPendingMedicine(message);\n        setConversationState(\"region_selection\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Got it! You re looking for \"${message}\". Now, which region would you like to check? Please select from the dropdown or type the region name.`,\n            timestamp: new Date().toISOString(),\n            type: \"region_selection\",\n          },\n        ]);\n        break;\n\n      case \"region_selection\":\n        setPendingRegion(message);\n        if (conversationState === \"medicine_search\" || pendingMedicine) {\n          // Check medicine availability\n          const medicine = pendingMedicine || message;\n          const region = message;\n          await checkMedicineAvailability(medicine, region);\n        } else {\n          // Show stockists in region\n          await showStockistsInRegion(message);\n        }\n        break;\n\n      case \"order_flow\":\n        setPendingMedicine(message);\n        setConversationState(\"order_region\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Great! You want to order \"${message}\". Which region should I check for availability?`,\n            timestamp: new Date().toISOString(),\n            type: \"region_selection\",\n          },\n        ]);\n        break;\n\n      case \"order_region\":\n        setPendingRegion(message);\n        await showOrderOptions(pendingMedicine, message);\n        break;\n\n      default:\n        await sendMessage(message);\n    }\n  };\n\n  // Event handlers\n  const handleSendMessage = async () => {\n    if (!currentMessage.trim()) return;\n\n    const message = currentMessage.trim();\n    setCurrentMessage(\"\");\n\n    await handleStructuredConversation(message);\n  };\n\n  const handleMedicineSelect = async (medicine, stockist) => {\n    setSelectedMedicine(medicine);\n    setSelectedStockist(stockist);\n    setMedicineName(medicine);\n\n    // Predict availability\n    const prediction = await predictAvailability(\n      medicine,\n      region,\n      medicine,\n      stockist\n    );\n    if (prediction) {\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Selected: ${medicine}\\nStockist: ${stockist}\\n\\nPrediction Results:\\nStatus: ${\n            prediction.status\n          }\\nConfidence: ${prediction.confidence_band}\\nProbability: ${(\n            prediction.probability * 100\n          ).toFixed(1)}%\\n${\n            prediction.advice ? `\\nAdvice: ${prediction.advice}` : \"\"\n          }`,\n          timestamp: new Date().toISOString(),\n          type: \"prediction_result\",\n          prediction: prediction,\n        },\n      ]);\n    }\n\n    setMedicineMatches([]);\n  };\n\n  // Helper functions for structured conversation\n  const checkMedicineAvailability = async (medicine, region) => {\n    try {\n      const searchResult = await searchMedicine(medicine, region);\n      if (searchResult && searchResult.matches.length > 0) {\n        setMedicineMatches(searchResult.matches);\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `I found ${searchResult.matches.length} medicine matches for \"${medicine}\" in ${region}. Please select one from the list below:`,\n            timestamp: new Date().toISOString(),\n            type: \"medicine_selection\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn't find any matches for \"${medicine}\" in ${region}. Please try a different medicine or region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't search for medicines right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const showStockistsInRegion = async (region) => {\n    try {\n      // Get all stockists for the region\n      const searchResult = await searchMedicine(\"\", region); // Empty search to get stockists\n      if (searchResult && searchResult.matches.length > 0) {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Here are the stockists available in ${region}:`,\n            timestamp: new Date().toISOString(),\n            type: \"stockist_list\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn t find any stockists in ${region}. Please try a different region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn t get stockist information right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const showOrderOptions = async (medicine, region) => {\n    try {\n      const searchResult = await searchMedicine(medicine, region);\n      if (searchResult && searchResult.matches.length > 0) {\n        setMedicineMatches(searchResult.matches);\n        setSelectedMedicine(medicine);\n        setRegion(region);\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Great! I found ${searchResult.matches.length} options for \"${medicine}\" in ${region}. Please select one and use the order form below to place your order.`,\n            timestamp: new Date().toISOString(),\n            type: \"order_options\",\n            matches: searchResult.matches,\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      } else {\n        setConversationState(\"features\");\n        setChatHistory((prev) => [\n          ...prev,\n          {\n            user: \"ai\",\n            message: `Sorry, I couldn t find \"${medicine}\" in ${region}. Please try a different medicine or region.`,\n            timestamp: new Date().toISOString(),\n          },\n          {\n            user: \"ai\",\n            message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n            timestamp: new Date().toISOString(),\n            type: \"features\",\n          },\n        ]);\n      }\n    } catch (error) {\n      setConversationState(\"features\");\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"ai\",\n          message: `Sorry, I couldn't process your order request right now. Please try again later.`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const handlePlaceOrder = async () => {\n    if (!selectedMedicine || stockQty <= 0) {\n      alert(\"Please select a medicine and enter a valid quantity\");\n      return;\n    }\n\n    const order = await placeOrder(\n      selectedMedicine,\n      stockQty,\n      region,\n      selectedStockist,\n      0\n    );\n    if (order) {\n      setChatHistory((prev) => [\n        ...prev,\n        {\n          user: \"user\",\n          message: `Place order for ${selectedMedicine} (Qty: ${stockQty})`,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          user: \"ai\",\n          message: `Order placed successfully!\\nOrder ID: ${order.order_id}\\nMedicine: ${selectedMedicine}\\nQuantity: ${stockQty}\\nRegion: ${region}\\nStockist: ${selectedStockist}`,\n          timestamp: new Date().toISOString(),\n          type: \"order_confirmation\",\n        },\n        {\n          user: \"ai\",\n          message: `\\n\\nWhat would you like to do next?\\n\\n🔍 Check medicine availability\\n🏥 Find stockists in your region\\n📦 Place orders for medicines`,\n          timestamp: new Date().toISOString(),\n          type: \"features\",\n        },\n      ]);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Auto-scroll to bottom of chat\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatHistory]);\n\n  // Load chat history from localStorage on component mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem(\"chatHistory\");\n    if (savedHistory) {\n      try {\n        const parsedHistory = JSON.parse(savedHistory);\n        setChatHistory(parsedHistory);\n      } catch (error) {\n        console.error(\"Error loading chat history:\", error);\n      }\n    } else {\n      // Initialize with welcome message if no saved history\n      setChatHistory([\n        {\n          user: \"ai\",\n          message:\n            '👋 Welcome! I m your AI assistant for medicine availability.\\n\\nPlease say \"hi\" or \"hello\" to start our conversation!',\n          timestamp: new Date().toISOString(),\n          type: \"welcome\",\n        },\n      ]);\n    }\n  }, []);\n\n  // Save chat history to localStorage whenever it changes\n  useEffect(() => {\n    if (chatHistory.length > 0) {\n      localStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n    }\n  }, [chatHistory]);\n\n  return (\n    <div\n      className=\"min-h-screen bg-night text-white flex flex-col\"\n      style={{\n        fontFamily: \"Arial, Helvetica, sans-serif\",\n        background: \"var(--background)\",\n      }}\n    >\n      <Navbar />\n\n      {/* 1st VH: About AI Chat */}\n      <section\n        className=\"px-6 md:px-12 flex items-center justify-center relative overflow-hidden\"\n        style={{ minHeight: \"100vh\" }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-brand/5 via-transparent to-brand/10\"></div>\n        <div className=\"w-full max-w-5xl text-center slide-in relative z-10\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-white via-brand to-brand/80 bg-clip-text text-transparent\">\n            About AI Chat\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed mb-8\">\n            A simple, reliable assistant to answer health logistics questions,\n            summarize records, and guide ordering. Scroll down to chat and use\n            quick controls.\n          </p>\n          <div className=\"flex justify-center gap-4\">\n            <div className=\"bg-black/40 backdrop-blur-sm border border-brand/20 rounded-xl p-4\">\n              <h4 className=\"text-brand font-bold mb-2\">Smart Responses</h4>\n              <p className=\"text-sm text-gray-300\">\n                AI-powered health logistics\n              </p>\n            </div>\n            <div className=\"bg-black/40 backdrop-blur-sm border border-brand/20 rounded-xl p-4\">\n              <h4 className=\"text-brand font-bold mb-2\">Quick Actions</h4>\n              <p className=\"text-sm text-gray-300\">\n                Streamlined ordering process\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* 2nd VH: Chat layout */}\n      <section className=\"px-6 md:px-12\" style={{ minHeight: \"100vh\" }}>\n        <div className=\"w-full max-w-6xl mx-auto grid grid-cols-12 gap-6\">\n          {/* Left rail: Chat History */}\n          <aside className=\"col-span-12 md:col-span-3\">\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-2xl shadow-2xl shadow-brand/10 p-6 h-full\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-bold text-brand\">Chat History</h3>\n                <button\n                  onClick={() => {\n                    setChatHistory([\n                      {\n                        user: \"ai\",\n                        message:\n                          '👋 Welcome! I\\'m your AI assistant for medicine availability.\\n\\nPlease say \"hi\" or \"hello\" to start our conversation!',\n                        timestamp: new Date().toISOString(),\n                        type: \"welcome\",\n                      },\n                    ]);\n                    localStorage.removeItem(\"chatHistory\");\n                  }}\n                  className=\"text-xs text-gray-400 hover:text-white px-2 py-1 rounded bg-gray-700 hover:bg-gray-600 transition-colors\"\n                >\n                  Clear\n                </button>\n              </div>\n              <div className=\"h-[50vh] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-brand/30 scrollbar-track-transparent\">\n                <div className=\"space-y-3\">\n                  {chatHistory.map((msg, i) => (\n                    <div\n                      key={i}\n                      className=\"bg-black/40 border border-brand/20 rounded-lg p-3 hover:bg-black/60 transition-colors\"\n                    >\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-brand font-semibold text-sm\">\n                          {msg.user === \"user\" ? \"You\" : \"AI\"}\n                        </span>\n                        <span className=\"text-xs text-gray-400\">\n                          {new Date(msg.timestamp).toLocaleTimeString([], {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-300 text-sm whitespace-pre-line\">\n                        {msg.message}\n                      </p>\n                      {msg.type === \"medicine_selection\" && msg.matches && (\n                        <div className=\"mt-2 space-y-1\">\n                          {msg.matches.slice(0, 3).map((match, idx) => (\n                            <button\n                              key={idx}\n                              onClick={() =>\n                                handleMedicineSelect(\n                                  match.medicine,\n                                  match.stockist\n                                )\n                              }\n                              className=\"w-full text-left bg-brand/20 hover:bg-brand/30 rounded p-2 text-xs transition-colors\"\n                            >\n                              <div className=\"font-semibold\">\n                                {match.medicine}\n                              </div>\n                              <div className=\"text-gray-400\">\n                                Stockist: {match.stockist}\n                              </div>\n                              <div className=\"text-brand\">\n                                Score: {(match.score * 100).toFixed(1)}%\n                              </div>\n                            </button>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  {isLoading && (\n                    <div className=\"bg-black/40 border border-brand/20 rounded-lg p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand\"></div>\n                        <span className=\"text-gray-300 text-sm\">\n                          AI is thinking...\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                  <div ref={chatEndRef} />\n                </div>\n              </div>\n            </div>\n          </aside>\n\n          {/* Main Chat box */}\n          <div className=\"col-span-12 md:col-span-9 flex flex-col\">\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-2xl shadow-2xl shadow-brand/10 p-6 flex-1 min-h-[50vh] mb-6\">\n              <div className=\"h-full overflow-y-auto scrollbar-thin scrollbar-thumb-brand/30 scrollbar-track-transparent\">\n                {chatHistory.length === 0 ? (\n                  <div className=\"text-gray-400 text-center py-8\">\n                    <div className=\"text-4xl mb-4\">💬</div>\n                    <p>No messages yet. Start the conversation!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {chatHistory.map((msg, i) => (\n                      <div\n                        key={i}\n                        className={`flex ${\n                          msg.user === \"user\" ? \"justify-end\" : \"justify-start\"\n                        }`}\n                      >\n                        <div\n                          className={`max-w-[80%] rounded-lg p-4 ${\n                            msg.user === \"user\"\n                              ? \"bg-brand text-white\"\n                              : \"bg-gray-700 text-gray-100\"\n                          }`}\n                        >\n                          <div className=\"whitespace-pre-line\">\n                            {msg.message}\n                          </div>\n                          {msg.type === \"medicine_selection\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Select a medicine:\n                              </p>\n                              {msg.matches.slice(0, 5).map((match, idx) => (\n                                <button\n                                  key={idx}\n                                  onClick={() =>\n                                    handleMedicineSelect(\n                                      match.medicine,\n                                      match.stockist\n                                    )\n                                  }\n                                  className=\"w-full text-left bg-white/10 hover:bg-white/20 rounded p-3 text-sm transition-colors\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.medicine}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Stockist: {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs text-brand\">\n                                    Match: {(match.score * 100).toFixed(1)}%\n                                  </div>\n                                </button>\n                              ))}\n                            </div>\n                          )}\n                          {msg.type === \"order_options\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Available options:\n                              </p>\n                              {msg.matches.slice(0, 3).map((match, idx) => (\n                                <button\n                                  key={idx}\n                                  onClick={() =>\n                                    handleMedicineSelect(\n                                      match.medicine,\n                                      match.stockist\n                                    )\n                                  }\n                                  className=\"w-full text-left bg-white/10 hover:bg-white/20 rounded p-3 text-sm transition-colors\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.medicine}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Stockist: {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs text-brand\">\n                                    Match: {(match.score * 100).toFixed(1)}%\n                                  </div>\n                                </button>\n                              ))}\n                            </div>\n                          )}\n                          {msg.type === \"region_selection\" && (\n                            <div className=\"mt-3 p-3 bg-blue-500/20 rounded-lg\">\n                              <p className=\"text-sm font-semibold mb-2\">\n                                Available Regions:\n                              </p>\n                              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                {REGIONS.map((reg) => (\n                                  <button\n                                    key={reg}\n                                    onClick={() => {\n                                      setCurrentMessage(reg);\n                                      handleSendMessage();\n                                    }}\n                                    className=\"text-left p-2 bg-white/10 hover:bg-white/20 rounded transition-colors\"\n                                  >\n                                    {reg}\n                                  </button>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          {msg.type === \"stockist_list\" && msg.matches && (\n                            <div className=\"mt-3 space-y-2\">\n                              <p className=\"text-sm font-semibold\">\n                                Available Stockists:\n                              </p>\n                              {msg.matches.map((match, idx) => (\n                                <div\n                                  key={idx}\n                                  className=\"w-full text-left bg-white/10 rounded p-3 text-sm\"\n                                >\n                                  <div className=\"font-semibold\">\n                                    {match.stockist}\n                                  </div>\n                                  <div className=\"text-xs opacity-75\">\n                                    Region: {match.region || \"Available\"}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    {isLoading && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"bg-gray-700 rounded-lg p-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand\"></div>\n                            <span>AI is thinking...</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div ref={chatEndRef} />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Input bar */}\n            <div className=\"bg-black/60 backdrop-blur-sm border border-brand/30 rounded-xl p-4 flex items-center gap-3 mb-6\">\n              <input\n                type=\"text\"\n                value={currentMessage}\n                onChange={(e) => setCurrentMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message...\"\n                className=\"flex-1 bg-night text-white px-4 py-3 rounded-lg border border-brand/20 focus:outline-none focus:border-brand transition-colors\"\n                disabled={isLoading}\n              />\n              <button\n                onClick={handleSendMessage}\n                disabled={isLoading || !currentMessage.trim()}\n                className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-lg font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? \"...\" : \"Send\"}\n              </button>\n            </div>\n\n            {/* Controls row */}\n            <div className=\"grid grid-cols-12 gap-4 items-start\">\n              <div className=\"col-span-12 md:col-span-8 flex gap-3\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  value={stockQty}\n                  onChange={(e) =>\n                    setStockQty(parseInt(e.target.value || \"0\", 10))\n                  }\n                  placeholder=\"Stocks (qty)\"\n                  className=\"radiant-input px-4 py-3 rounded-xl w-40\"\n                />\n                <input\n                  type=\"text\"\n                  value={medicineName}\n                  onChange={(e) => setMedicineName(e.target.value)}\n                  placeholder=\"Medicine name\"\n                  className=\"radiant-input px-4 py-3 rounded-xl flex-1\"\n                />\n                <button\n                  onClick={handlePlaceOrder}\n                  className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-xl font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300 transform hover:scale-105\"\n                >\n                  Place order\n                </button>\n              </div>\n              <div className=\"col-span-12 md:col-span-4\">\n                <label className=\"block text-sm text-gray-400 mb-2\">\n                  Region\n                </label>\n                <select\n                  className=\"w-full radiant-input px-4 py-3 rounded-xl\"\n                  value={region}\n                  onChange={(e) => setRegion(e.target.value)}\n                >\n                  {REGIONS.map((r) => (\n                    <option key={r} value={r}>\n                      {r}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Order Confirmation Popup */}\n      {showOrderPopup && orderDetails && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-night border border-brand/30 rounded-2xl p-8 max-w-md w-full mx-4\">\n            <div className=\"text-center\">\n              <div className=\"text-6xl mb-4\">✅</div>\n              <h3 className=\"text-2xl font-bold text-brand mb-4\">\n                Order Received!\n              </h3>\n              <div className=\"text-gray-300 space-y-2 mb-6\">\n                <p>\n                  <span className=\"font-semibold\">Order ID:</span>{\" \"}\n                  {orderDetails.order_id}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Medicine:</span>{\" \"}\n                  {orderDetails.details.medicine_name}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Quantity:</span>{\" \"}\n                  {orderDetails.details.quantity}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Region:</span>{\" \"}\n                  {orderDetails.details.region}\n                </p>\n                <p>\n                  <span className=\"font-semibold\">Stockist:</span>{\" \"}\n                  {orderDetails.details.stockist}\n                </p>\n              </div>\n              <p className=\"text-gray-400 text-sm mb-6\">\n                We will process your order shortly and send you updates.\n              </p>\n              <button\n                onClick={() => {\n                  setShowOrderPopup(false);\n                  setOrderDetails(null);\n                }}\n                className=\"px-6 py-3 bg-gradient-to-r from-brand to-brand/80 rounded-lg font-bold hover:shadow-lg hover:shadow-brand/25 transition-all duration-300\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <footer className=\"mt-auto bg-night border-t border-brand/20 py-6 text-center text-gray-400\">\n        © {new Date().getFullYear()} MedSecure AI. All rights reserved.\n      </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}